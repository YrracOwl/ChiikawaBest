import win.ui;
/*DSG{{*/
winform = win.form(text="webwatcher";right=599;bottom=719;border="none";clipch=1)
winform.add(
html_watcher={cls="custom";text="自定义控件";left=16;top=64;right=584;bottom=680;db=1;dl=1;dr=1;dt=1;z=5};
task_show={cls="plus";text="-- 待显示 --";left=416;top=688;right=584;bottom=712;db=1;dl=1;z=4};
关闭闹钟={cls="button";text="关闭闹钟";left=168;top=688;right=240;bottom=712;db=1;dl=1;z=3};
刷新页面={cls="button";text="刷新页面";left=104;top=32;right=176;bottom=56;dl=1;dt=1;z=8};
启动闹钟={cls="button";text="启动闹钟";left=88;top=688;right=160;bottom=712;db=1;dl=1;z=2};
返回={cls="button";text="返回";left=8;top=32;right=48;bottom=56;dl=1;dt=1;z=6};
进程检测={cls="button";text="进程检测";left=8;top=688;right=80;bottom=712;db=1;dl=1;z=1};
配置选择={cls="combobox";left=184;top=32;right=432;bottom=56;aw=1;border=1;clip=1;dt=1;items={};mode="dropdown";z=9};
首页={cls="button";text="首页";left=56;top=32;right=96;bottom=56;dl=1;dt=1;z=7}
)
/*}}*/

//////////////////////////////////////////////////////////////////////
//Libray导入
//////////////////////////////////////////////////////////////////////

//自定义库
import quarks;

//控制台
import console;

//导入fsys.file以获取文件的更新时间
import fsys.file;

//计划任务导入
import win.taskScheduler;
var taskScheduler = win.taskScheduler( winform );

//////////////////////////////////////////////////////////////////////
//界面线程变量
//////////////////////////////////////////////////////////////////////

//web.view导入
import web.view;
var wb = web.view(winform.html_watcher,..wbUserDataDir,..launch_params); 
wb.preloadScript(`
//禁止超链接默认开新窗口
window.addEventListener('load',function(){ 
	let base = document.querySelector('base'); 
	if (base) base.removeAttribute('target');	
})

//禁止超链接开新窗口
document.addEventListener('mousedown', function (event) {
  var target = event.target;
  for(var i=1;target && i<=5;i++){
  	if ( target.tagName == 'A')  {
  		target.removeAttribute('target');
  		return;
  	}
  	
  	target = target.parentNode; 
  } 
}, true);

//禁止弹窗函数
window.open =  function(url){ window.location.href = url; } 
`)
var url_loading = ..wsock.tcp.simpleHttpServer.getUrl("\res\loading.html"); 

//复用代码，已经加入到"winform.配置选择.onOk()"中了
//因此需要在onOk()函数之后再调用

//////////////////////////////////////////////////////////////////////
//函数调用
//////////////////////////////////////////////////////////////////////

//线程共享表
import thread.table;
var init_thrdTable = thread.table("init_shareVars",true/*清空*/ )

//计划任务函数
var task  = taskScheduler.create("间隔一秒执行",function(){
    winform.task_show.text = time(__,"%Y/%m/%d %H:%M:%S");
    //win.setTop(winform.hwnd)
    quarks.bring_to_me(winform)
} )

//设定计划任务执行时间方案
task.interval = {  
   second = 1;
}

//////////////////////////////////////////////////////////////////////
//界面配置-放最后
//////////////////////////////////////////////////////////////////////

//窗口动效
/*
import win.animate;
win.animate.fade( winform ).show();
*/

winform.进程检测.oncommand = function(id,event){
	winform.进程检测.disabledText = {"✶";"✸";"✹";"✺";"✹";"✷"};	
	var temp = quarks.process_detector("notepad.exe");
	winform.进程检测.disabledText = null;
	winform.task_show.text = "process id: " + tostring(temp);
}

winform.启动闹钟.oncommand = function(id,event){
	//taskScheduler.start();
	..alarmForm.show(true);
}

winform.关闭闹钟.oncommand = function(id,event){
	//taskScheduler.stop();
}

winform.返回.oncommand = function(id,event){
	if(wb.location != init_thrdTable.g_wb_location){
		wb.doScript("window.history.back();");
	}
}

winform.首页.oncommand = function(id,event){
	var url_crwaler = ..wsock.tcp.simpleHttpServer.getUrl(init_thrdTable.path_html_crawler); 
	wb.go(url_crwaler);
	if(url_crwaler != url_loading){
		init_thrdTable.g_wb_location = wb.location;
		winform.返回.disabled = false;
		winform.首页.disabled = false;
		winform.刷新页面.disabled = false;
	}
}

winform.刷新页面.oncommand = function(id,event){
/*
	var url_crwaler = ..wsock.tcp.simpleHttpServer.getUrl(init_thrdTable.path_html_crawler); 
	console.log(io.remove(..wbHistoryDir + "Visited Links"))
*/
/*
	io.remove("/appvar/userDataDir/EBWebView/Default/History")
	io.remove("/appvar/userDataDir/EBWebView/Default/History-journal")
*/
	winform.配置选择.onOk();
}

winform.配置选择.onOk = function(){ 
	winform.html_watcher.setFocus();
	wb.go(url_loading);
	winform.返回.disabled = true;
	winform.首页.disabled = true;
	winform.刷新页面.disabled = true;
	
	var cfg_chosen = list_cfg[winform.配置选择.selText];
	thread.invoke( 
		function(winform,init_thrdTable,cfg_chosen){
			import quarks;
			var data_html_crawler,path_html_crawler,host_html_crawler = quarks.html_crawler(cfg_chosen,..inet_launch_params);
			init_thrdTable.path_html_crawler = path_html_crawler;
			init_thrdTable.host_html_crawler = host_html_crawler;
			init_thrdTable.flag_html_crawler = true;
		},winform,init_thrdTable,cfg_chosen,..inet_launch_params
	)
	
	thread.invoke( 
		function(winform,init_thrdTable){
			while(1){
				if(init_thrdTable.flag_html_crawler){
					winform.首页.oncommand()
					init_thrdTable.flag_html_crawler = null;
					return ;
				}
			}
		},winform,init_thrdTable
	)
}

//配置选择的设置

/*
winform.设置.oncommand = function(id,event){
	var frmChild = winform.loadForm("\dlg\settings.aardio");
	frmChild.show();
}
*/

//生成list内容
if(..cfg.html_crawler.richedit){
	list_items,list_cfg = quarks.parse_cfg(..cfg.html_crawler.richedit);
	winform.配置选择.items = list_items;
}

if(winform.配置选择.count > 0){
	if(..cfg.web_watcher.配置选择){
		winform.配置选择.selIndex = ..cfg.web_watcher.配置选择;
	}
	else {
		winform.配置选择.selIndex = 1;
	}
	winform.配置选择.onOk();
}

/*
winform.onClose = function(hwnd,message,wParam,lParam){
    if(..cfg.apps_setting){
    	if(..cfg.apps_setting.关闭时清空记录){
    	    winform.disabled = true;
    	    winform.html_watcher.close();
    	    wb = null;
    	   	winform.msgbox("5秒后即将清理历史记录","注意",0,5000)
    		if(io.remove(..wbHistoryDir + "Visited Links") and io.remove(..wbHistoryDir + "History") and io.remove(..wbHistoryDir + "History-journal")){
    			winform.msgbox("清理成功！即将退出！", "恭喜！",0,2000)
    		}
    		else {
    			winform.msgbox("清理失败！请手动清理！5秒后自动退出！", "注意！",0,5000)
    		}
    	}
    }
}
*/

/*
winform.时间线.oncommand = function(id,event){
	
	var frmChild = ..mainForm.loadForm("\dlg\timeline.aardio");
	frmChild.show();
}
*/

winform.bindConfig( ..cfg.web_watcher,{
	combobox = {
		["配置选择"] = "selIndex"
	};
} );

import win.ui.simpleWindow;
win.ui.simpleWindow(winform,,,,).skin(
	background = { 
		hover = 0xff99ffcc;
		active = 0xffff6666; 
		default = 0x00000000; 
	}
	color = { 
		hover = 0xff666666;
		active = 0xffffffff; 
		default = 0xFF7BA5BF; 
	}
)

winform.show();
win.loopMessage();
return winform;