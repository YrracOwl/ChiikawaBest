import win.ui;
/*DSG{{*/
winform = win.form(text="内容监控";right=599;bottom=899;border="none";clipch=1)
winform.add(
checkbox={cls="checkbox";text="置顶此窗口";left=504;top=880;right=592;bottom=896;db=1;dr=1;z=12};
["edit进程匹配"]={cls="edit";left=168;top=840;right=592;bottom=864;border=1;db=1;disabled=1;dl=1;dr=1;z=8};
html_watcher={cls="custom";text="自定义控件";left=8;top=64;right=592;bottom=832;db=1;dl=1;dr=1;dt=1;z=2};
停止监控={cls="button";text="停止监控";left=88;top=872;right=160;bottom=896;db=1;dl=1;z=10};
关闭所有笔记={cls="button";text="关闭所有笔记";left=248;top=872;right=336;bottom=896;db=1;dl=1;z=15};
刷新页面={cls="button";text="刷新页面";left=104;top=32;right=176;bottom=56;dl=1;dt=1;z=5};
开始监控={cls="button";text="开始监控";left=8;top=872;right=80;bottom=896;db=1;dl=1;z=9};
打开笔记={cls="button";text="打开笔记";left=168;top=872;right=240;bottom=896;db=1;disabled=1;dl=1;z=14};
添加闹钟={cls="button";text="添加闹钟";left=520;top=32;right=592;bottom=56;dr=1;dt=1;z=1};
设置={cls="button";text="设置";left=464;top=32;right=512;bottom=56;dr=1;dt=1;z=13};
返回={cls="button";text="返回";left=8;top=32;right=48;bottom=56;dl=1;dt=1;z=3};
选择文件={cls="button";text="选择文件";left=88;top=840;right=160;bottom=864;db=1;dl=1;z=11};
选择窗口={cls="button";text="选择窗口";left=8;top=840;right=80;bottom=864;db=1;dl=1;z=7};
配置选择={cls="combobox";left=184;top=32;right=432;bottom=56;aw=1;border=1;clip=1;dt=1;items={};mode="dropdown";z=6};
首页={cls="button";text="首页";left=56;top=32;right=96;bottom=56;dl=1;dt=1;z=4}
)
/*}}*/

//////////////////////////////////////////////////////////////////////
//Libray导入
//////////////////////////////////////////////////////////////////////

//自定义库
import quarks;

//控制台
import winex;
import mouse;
import mouse.hook;
import win.ui.tooltip;

//下面创建一个手动跟踪模式的提示控件
var balloonTipCtrl = win.ui.tooltip.tracking(winform,false);

//////////////////////////////////////////////////////////////////////
//界面线程变量
//////////////////////////////////////////////////////////////////////

//appNote句柄名称表
var appNoteWinForm = {}; 

//web.view导入
//import web.view;
var ww_webview = ..web.view(winform.html_watcher,..wbUserDataDir,..launch_params);
ww_webview.preloadScript(`
//禁止超链接默认开新窗口
window.addEventListener('load',function(){ 
	let base = document.querySelector('base'); 
	if (base) base.removeAttribute('target');	
})

//禁止超链接开新窗口
document.addEventListener('mousedown', function (event) {
  var target = event.target;
  for(var i=1;target && i<=5;i++){
  	if ( target.tagName == 'A')  {
  		target.removeAttribute('target');
  		return;
  	}
  	
  	target = target.parentNode; 
  } 
}, true);

//禁止弹窗函数
window.open =  function(url){ window.location.href = url; };

`)
var url_loading = ..wsock.tcp.simpleHttpServer.getUrl("\res\loading.html"); 

//复用代码，已经加入到"winform.配置选择.onOk()"中了
//因此需要在onOk()函数之后再调用

//////////////////////////////////////////////////////////////////////
//函数调用
//////////////////////////////////////////////////////////////////////

//线程共享表
import thread.table;
var init_thrdTable = thread.table("init_shareVars",true/*清空*/ )


//////////////////////////////////////////////////////////////////////
//界面配置-放最后
//////////////////////////////////////////////////////////////////////

winform.停止监控.disabled = true;
winform.开始监控.disabled = true;
winform.打开笔记.disabled = true;

winform.添加闹钟.oncommand = function(id,event){
	..alarmForm.show(true);
}

winform.返回.oncommand = function(id,event){
	if(ww_webview.location != init_thrdTable.g_wb_location){
		ww_webview.doScript("window.history.back();");
	}
}

winform.首页.oncommand = function(id,event){
	var url_crwaler = ..wsock.tcp.simpleHttpServer.getUrl(init_thrdTable.path_html_crawler); 
	ww_webview.go(url_crwaler);
	if(url_crwaler != url_loading){
		init_thrdTable.g_wb_location = ww_webview.location;
		winform.返回.disabled = false;
		winform.首页.disabled = false;
		winform.刷新页面.disabled = false;
	}
}

winform.刷新页面.oncommand = function(id,event){
	winform.配置选择.onOk();
}

winform.配置选择.onOk = function(){
	//取消全选
	::User32.SendMessage(winform.配置选择.hwnd,0x142/*_CB_SETEDITSEL*/,-1,0)
	
	winform.html_watcher.setFocus();
	if(list_cfg != null){
		ww_webview.go(url_loading);
		winform.返回.disabled = true;
		winform.首页.disabled = true;
		winform.刷新页面.disabled = true;
	
		var cfg_chosen = list_cfg[winform.配置选择.selText];
		thread.invoke( 
			function(winform,init_thrdTable,cfg_chosen){
				import quarks;
				var data_html_crawler,path_html_crawler,host_html_crawler = quarks.html_crawler(cfg_chosen,..inet_launch_params);
				init_thrdTable.path_html_crawler = path_html_crawler;
				init_thrdTable.host_html_crawler = host_html_crawler;
				init_thrdTable.flag_html_crawler = true;
			},winform,init_thrdTable,cfg_chosen,..inet_launch_params
		)
		
		thread.invoke( 
			function(winform,init_thrdTable){
				while(1){
					if(init_thrdTable.flag_html_crawler){
						winform.首页.oncommand()
						init_thrdTable.flag_html_crawler = null;
						return ;
					}
				}
			},winform,init_thrdTable
		)
	}
}

//生成list内容
if(..cfg.html_crawler.richedit){
	list_items,list_cfg = quarks.parse_cfg(..cfg.html_crawler.richedit);
	winform.配置选择.items = list_items;
}

if(winform.配置选择.count > 0){
	if(..cfg.web_watcher.配置选择){
		winform.配置选择.selIndex = ..cfg.web_watcher.配置选择;
	}
	else {
		winform.配置选择.selIndex = winform.配置选择.count;
	}
	winform.配置选择.onOk();
	//取消全选
}

//生成edit内容
if(..cfg.web_watcher.edit进程匹配){
	winform.edit进程匹配.text = ..cfg.web_watcher.edit进程匹配;
}

winform.bindConfig( ..cfg.web_watcher,{
	combobox = {
		["配置选择"] = "selIndex"
	};
	
	edit = {
		["edit进程匹配"] = "text";
	}
} );

import win.ui.simpleWindow;
win.ui.simpleWindow(winform,,,,).skin(
	background = { 
		hover = 0xff99ffcc;
		active = 0xffff6666; 
		default = 0x00000000; 
	}
	color = { 
		hover = 0xff666666;
		active = 0xffffffff; 
		default = 0xFF7BA5BF; 
	}
)

winform.mousePosWindow = win.getDesktop();

winform.选择窗口.oncommand = function(id,event){

	var mouseHooker = mouse.hook();
	mouseHooker.proc = function(msg,x,y,mouseData,injected,flags,timeStamp,extraInfo){
		if( injected ) return;	 
    	select(msg) {
    		case 0x201/*_WM_LBUTTONDOWN*/{
    		    mouseHooker.close();
    		    balloonTipCtrl.trackPopup(false);
    		    
    	    	var mousePosX, mousePosY= mouse.getPos();
    	    	var pointWin  = winex.fromPoint(mousePosX, mousePosY);
    	    	winform.mousePosWindow = pointWin;
    	    	
    	    	import win;
    	    	import process.cmdline;
    	    	var tid,pid = win.getThreadProcessId(pointWin);
    	    	var prcsInfo = process.cmdline(pid);
    	    	
    	    	winform.edit进程匹配.text = prcsInfo;
				winform.uiReady();
    	    	winform.停止监控.oncommand();
    	    	
    		};
    		case 0x202/*_WM_LBUTTONUP*/ {
    		}
    		case 0x200/*_WM_MOUSEMOVE*/ {
    		    var mousePosX, mousePosY= mouse.getPos();
    		    balloonTipCtrl.setText("左键单击，获取进程名").trackPopup(true,mousePosX+10,mousePosY+20 );
    		}
    	};
	};
}

winform.uiReady = function(){
	winform.开始监控.disabled = false;
	winform.停止监控.disabled = true;
    winform.打开笔记.disabled = false;
    winform.关闭所有笔记.disabled = false;
}

winform.uiNotReady = function(){
	winform.开始监控.disabled = true;
	winform.停止监控.disabled = true;
    winform.打开笔记.disabled = true;
    winform.关闭所有笔记.disabled = true;
}


winform.getPrcsExeName = function(){
	var str = winform.edit进程匹配.text;
	if(str){
		var prcsPath = "";
		
		var pattern =  //^"
		var indexX,indexY = string.find( str,  pattern );
		if(indexX == 1){
			pattern = //%""
			prcsPath = string.split(string.match( str, pattern ),'"')[2];
		}
		else {
			prcsPath = string.split(str,' ')[1];
		}
		var pattern =  "[\a\d]*.exe";
		//import console;
		//console.dump(str);console.dump(indexX);console.dump(indexY);console.dump(prcsPath);
		if(prcsPath == null){
			return null; 
		}
		else {
			prcsExeName = string.match( prcsPath, pattern );
			return prcsExeName;
		}
	}
	else {
		return null; 
	}
}


winform.开始监控.oncommand = function(id,event){
	winform.开始监控.disabled = true;
	winform.开始监控.disabledText = {"✶";"✸";"✹";"✺";"✹";"✷";text = "监控中";};
	var prcsExeName = winform.getPrcsExeName();

	..webwatcherPrcsCntShot = 0;
	for processEntry in process.each( prcsExeName ) { 
		..webwatcherPrcsCntShot = ..webwatcherPrcsCntShot + 1; 
	}
	
	if(..webWatcher_taskScheduler.get("每3秒检测网页")){
		..webWatcher_taskScheduler.delete("每3秒检测网页");
	}
	//计划任务函数
	var task = ..webWatcher_taskScheduler.create("每3秒检测网页",function(prcsExeName){
		var prcsCnt = 0;
		for processEntry in process.each( prcsExeName ) { 
			 prcsCnt = prcsCnt + 1;
		}
		if(..webwatcherPrcsCntShot != prcsCnt){
			..webwatcher.show();
			win.setForeground(..webwatcher.hwnd);
			
			winform.打开笔记.oncommand();
			
			..webwatcherPrcsCntShot = prcsCnt;
			winform.配置选择.onOk();
		}
	},prcsExeName,winform);
	
	task.interval = {  
   		second = 3;
	}
	..webWatcher_taskScheduler.start();
	
	winform.停止监控.disabled = false;
}

winform.停止监控.oncommand = function(id,event){
	..webWatcher_taskScheduler.delete("每3秒检测网页");
	..webWatcher_taskScheduler.stop();
	winform.停止监控.disabled = true;
	winform.开始监控.disabledText = null;
	winform.开始监控.disabled = false;
}

winform.onClose = function(hwnd,message,wParam,lParam){
	winform.show(false);
    return false; 
}

winform.选择文件.oncommand = function(id,event){
	var filePath = ..fsys.dlg.open("应用程序|*.exe|所有文件|*.*");
	if(filePath){
		winform.停止监控.oncommand();
		winform.edit进程匹配.text = filePath;
		winform.uiReady();
	}	
}

winform.checkbox.oncommand = function(id,event){
	if(winform.checkbox.checked){
		win.setTopmost(winform.hwnd)
	}
	else {
		win.setTopmost(winform.hwnd,false)
	};
}

winform.设置.oncommand = function(id,event){	
	var frmChild = winform.loadForm("\dlg\settings.aardio");
	frmChild.show();
}


winform.打开笔记.oncommand = function(id,event){
	var prcsExeName = winform.getPrcsExeName();
	
	if(appNoteWinForm[prcsExeName]){
		win.showForeground(appNoteWinForm[prcsExeName].hwnd)
	}
	elseif(prcsExeName == null){
		return ; 
	}
	else {
		var frmChild = ..mainForm.loadForm("\dlg\note_for_app.aardio");
		frmChild.updateNote(prcsExeName);
		frmChild.show();
		appNoteWinForm[prcsExeName] = frmChild;
	};
	winform.关闭所有笔记.disabled = false;
}

//按钮初始化
var readyOrNot = winform.getPrcsExeName();
if(readyOrNot){
	winform.uiReady();
}
else {
	winform.uiNotReady();
}


if(..cfg.apps_setting.启动时监控应用){
	if(readyOrNot){
		winform.开始监控.oncommand();
	}
}

winform.关闭所有笔记.oncommand = function(id,event){
	if(appNoteWinForm){
		for(k,v in appNoteWinForm){
			v.show(true)
			v.forceClose();
		}
		appNoteWinForm = {};
	};
}

winform.enableDpiScaling();
::User32.SendMessage(winform.配置选择.hwnd,0x142/*_CB_SETEDITSEL*/,-1,0);

//winform.show();
win.loopMessage();
return winform;