import fonts.fontAwesome;

import win.ui;
import win.ui.atom;
/*DSG{{*/
var alarmSetWinform = win.form(text="添加闹钟";right=303;bottom=280;border="none";clipch=1;max=false)
alarmSetWinform.add(
checkbox={cls="checkbox";text="快捷定时";left=64;top=139;right=144;bottom=158;dl=1;dt=1;font=LOGFONT(h=-13);z=16};
datetimepick={cls="datetimepick";left=28;top=60;right=280;bottom=84;dl=1;dt=1;edge=1;font=LOGFONT(h=-13);z=1};
edithh={cls="edit";text="1";left=40;top=96;right=72;bottom=121;dl=1;dt=1;edge=1;font=LOGFONT(h=-13);multiline=1;z=2};
editmm={cls="edit";text="1";left=120;top=96;right=152;bottom=121;dl=1;dt=1;edge=1;font=LOGFONT(h=-13);multiline=1;z=4};
editss={cls="edit";text="1";left=200;top=96;right=232;bottom=121;dl=1;dt=1;edge=1;font=LOGFONT(h=-13);multiline=1;z=8};
plusBtn={cls="plus";text="添加闹钟(Ctrl+G)";left=148;top=212;right=296;bottom=242;align="left";bgcolor=11580047;border={radius=22};dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-15;name='FontAwesome');padding={left=10;top=3}};iconText='\uF274';notify=1;textPadding={left=30};z=7};
plusContent={cls="plus";left=28;top=174;right=276;bottom=206;bgcolor=16777215;border={bottom=1;color=-6908266};dl=1;dt=1;editable=1;font=LOGFONT(h=-13);textPadding={top=6;bottom=2};z=6};
plusDel={cls="plus";text="显示闹钟";left=13;top=213;right=111;bottom=243;align="left";bgcolor=1587666;border={radius=22};dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-15;name='FontAwesome');padding={left=10;top=3}};iconText='\uF002';notify=1;textPadding={left=30};z=14};
["plus分"]={cls="plus";text="分";left=176;top=96;right=192;bottom=121;font=LOGFONT(h=-13);z=12};
["plus时"]={cls="plus";text="时";left=96;top=96;right=112;bottom=121;font=LOGFONT(h=-13);z=11};
["plus秒"]={cls="plus";text="秒";left=256;top=96;right=272;bottom=121;font=LOGFONT(h=-13);z=13};
spinhh={cls="spin";left=72;top=96;right=92;bottom=121;dl=1;dt=1;font=LOGFONT(h=-13);z=3};
spinmm={cls="spin";left=152;top=96;right=172;bottom=121;dl=1;dt=1;font=LOGFONT(h=-13);z=5};
spinss={cls="spin";left=232;top=96;right=252;bottom=121;dl=1;dt=1;font=LOGFONT(h=-13);z=9};
快捷定时={cls="combobox";left=148;top=136;right=260;bottom=160;dl=1;dt=1;edge=1;font=LOGFONT(h=-13);items={};mode="dropdown";z=15};
显示位置={cls="combobox";left=104;top=32;right=216;bottom=56;dl=1;dt=1;edge=1;font=LOGFONT(h=-13);items={};mode="dropdown";z=10}
)
/*}}*/

var atom,hwnd/*冲突窗口的句柄,该函数会自动激活此窗口*/ = alarmSetWinform.atom("BA886D45-C828-4ECB-B520-66FC5263545F.addAlarm");
if(!atom){
	/*为窗口设置原子值可以避免一个程序重复运行多个实例*/
	win.show(hwnd,true);
	win.quitMessage();	
	return;
}

alarmSetWinform.plusBtn.skin({
	background={
		default=0x668FB2B0;
		disabled=0xFFCCCCCC;
		hover=0xFF928BB3
	};
	color={
		default=0xFF000000;
		disabled=0xFF6D6D6D
	}
})

alarmSetWinform.plusContent.setCueBannerText("请输入闹钟标题");

alarmSetWinform.显示位置.items = {"左上角显示";"左下角显示";"中上显示";"居中显示";"右上角显示";"右下角显示";}
if(not ..cfg.alarmSettings.显示位置){
	alarmSetWinform.显示位置.selIndex = 3;
}

alarmSetWinform.快捷定时.items = {"1分钟后";"10分钟后";"30分钟后";"1小时后";"2小时后";"6小时后";"12小时后";"1天后";"1周后";}
alarmSetWinform.快捷定时.selIndex = null;
alarmSetWinform.快捷定时.disabled = true;

alarmSetWinform.checkbox.checked = false;

import win.ui.statusbar;
var statusbar = win.ui.statusbar( alarmSetWinform );
statusbar.setMinHeight(30);//设置最小高度（含上下边框宽度）
statusbar.addItem("当前时间 " + tostring(time(,"%H:%M:%S")) , 110/*宽度*/);
statusbar.addItem("请添加闹钟", /*宽度*/);

import quarks;
//计划任务导入
import win.taskScheduler;
alarm_taskScheduler = win.taskScheduler( alarmSetWinform );
alarmSetWinform.datetimepick.setFormat("          yyyy年MM月dd日dddd")

var timeShowClock = alarm_taskScheduler.create("timeShowClock",function(){
    var timeNowSeconds = time(,"%H:%M:%S");
    statusbar.setText("当前时间 " + tostring(timeNowSeconds),1/*第几个分块*/)
    if(alarmSetWinform.checkbox.checked){
    	alarmSetWinform.spinhh.pos = tostring(time(__,'%H'));
		alarmSetWinform.spinmm.pos = tostring(time(__,'%M'));
		alarmSetWinform.spinss.pos = tostring(time(__,'%S'));	
    }
});

timeShowClock.interval = { 
	second = 1;
};

alarm_taskScheduler.start();

var taskTable = {};
var scheduleTable = {};
if(..dbAlarmClock.existsTable("default")){
	..logMsg(">>>加载闹钟：")
	for rowid, time, content in ..dbAlarmClock.each("SELECT rowid,* FROM [default]") {
		taskTable[time] = content;
	}
	..logWarn(table.count(taskTable))
	if(table.count(taskTable)>0){
		for(k,v in taskTable){
			..logMsg(k,v)
			var tm = time(k,"%Y年%m月%d日%H时%M分%S秒");
			var tmstr = tostring(tm);
			var mstr = tm.month;
			var dstr = tm.day;
			var Hstr = tm.hour;
			var Mstr = tm.minute;
			var Sstr = tm.second;
			
			var AlarmContent = v;
			scheduleTable[k] = alarm_taskScheduler.create(k,function(AlarmContent,k){
				var frmChild = win.loadForm("\dlg\alarms.aardio",,win.getDesktop());
				frmChild.updateContent(AlarmContent,k);
				
				alarmSetWinform.enableDpiScaling("init");
				var alarmClockX, alarmClockY = alarmSetWinform.showPos(alarmSetWinform.显示位置.selText, frmChild.width, frmChild.height);		
				win.setPos(frmChild.hwnd, alarmClockX, alarmClockY);

				var foregroundHwnd = win.getForeground();
				
				win.setTopmost(frmChild.hwnd);
				win.setForeground(foregroundHwnd);
				frmChild.show();
				frmChild.redrawBackground();
				win.flash(frmChild.hwnd,32);

			},AlarmContent,k);
			
			scheduleTable[k].time = { 
    			second =  Sstr ;
    			minute = Mstr ; 
    			hour = Hstr ;
    			day = dstr ;
    			month = mstr ;
			};
		}
	}
	
	
}

alarmSetWinform.onClose = function(hwnd,message,wParam,lParam){
    alarmSetWinform.show(false);
    return true; 
}


import win.ui.simpleWindow;
win.ui.simpleWindow(alarmSetWinform,,,,).skin(
	background = { 
		hover = 0xff99ffcc;
		active = 0xffff6666; 
		default = 0x00000000; 
	}
	color = { 
		hover = 0xff666666;
		active = 0xffffffff; 
		default = 0xFF7BA5BF; 
	}
)

alarmSetWinform.spinhh.buddy = alarmSetWinform.edithh; 
alarmSetWinform.spinhh.setRange(0,23); //一定要设置数值的上下限
alarmSetWinform.spinhh.pos = tostring(time(__,'%H'));//设置数值
alarmSetWinform.spinhh.inc = 1;//设置每次点击箭头的增减量（步长）

//处理spin事件通知,将要改变值之前触发
alarmSetWinform.spinhh.onnotify = function(id,code,ptr){ 
	if(code==0xFFFFFD2E/*_UDN_DELTAPOS*/){
		var nmUpDown = ..raw.convert(ptr, {
			struct hdr = ::NMHDR();
			int pos; //当前位置
			int delta; //位置的增减量,单击向上箭头此值为负数
		} );  
	} 
}

alarmSetWinform.spinmm.buddy = alarmSetWinform.editmm; 
alarmSetWinform.spinmm.setRange(0,59); //一定要设置数值的上下限
alarmSetWinform.spinmm.pos = tostring(time(__,'%M'));//设置数值
alarmSetWinform.spinmm.inc = 1;//设置每次点击箭头的增减量（步长）

//处理spin事件通知,将要改变值之前触发
alarmSetWinform.spinmm.onnotify = function(id,code,ptr){ 
	if(code==0xFFFFFD2E/*_UDN_DELTAPOS*/){
		var nmUpDown = ..raw.convert(ptr, {
			struct hdr = ::NMHDR();
			int pos; //当前位置
			int delta; //位置的增减量,单击向上箭头此值为负数
		} );  
	} 
}

alarmSetWinform.spinss.buddy = alarmSetWinform.editss; 
alarmSetWinform.spinss.setRange(0,59); //一定要设置数值的上下限
alarmSetWinform.spinss.pos = tostring(time(__,'%S'));//设置数值
alarmSetWinform.spinss.inc = 1;//设置每次点击箭头的增减量（步长）

//处理spin事件通知,将要改变值之前触发
alarmSetWinform.spinss.onnotify = function(id,code,ptr){ 
	if(code==0xFFFFFD2E/*_UDN_DELTAPOS*/){
		var nmUpDown = ..raw.convert(ptr, {
			struct hdr = ::NMHDR();
			int pos; //当前位置
			int delta; //位置的增减量,单击向上箭头此值为负数
		} );  
	} 
}

alarmSetWinform.showPos = function(posStr, frmChildWidth, frmChildHeight){
	
	var alarmWidth, alarmHeight = frmChildWidth, frmChildHeight;
	
	var workAreaTable = win.getWorkArea(win.getDesktop());
	var bottomPos, leftPos, rightPos, topPos = workAreaTable.bottom, workAreaTable.left, workAreaTable.right, workAreaTable.top;
	
	var alarmPosX, alarmPosY = leftPos, topPos;
	
/*
	var PosLUX, PosLUY = leftPos, topPos;
	var PosRUX, PosRUY = rightPos-alarmWidth, topPos;
	var PosRDX, PosRDY = rightPos-alarmWidth, bottomPos-alarmHeight;
	var PosLDX, PosLDY = leftPos, bottomPos-alarmHeight;
	var PosMX, PosMY = leftPos + (rightPos-leftPos)*0.5-alarmWidth*0.5, topPos + (bottomPos-topPos)*0.5-alarmHeight*0.5;
*/
	
	var hwndForeground = win.getForeground();
	if(hwndForeground){
		var workAreaTable = win.getWorkArea(hwndForeground);
		var bottomPos, leftPos, rightPos, topPos = workAreaTable.bottom, workAreaTable.left, workAreaTable.right, workAreaTable.top;
	}
		
	var PosLUX, PosLUY = leftPos, topPos;
	var PosRUX, PosRUY = rightPos-alarmWidth, topPos;
	var PosRDX, PosRDY = rightPos-alarmWidth, bottomPos-alarmHeight;
	var PosLDX, PosLDY = leftPos, bottomPos-alarmHeight;
	var PosMX, PosMY = leftPos + (rightPos-leftPos)*0.5-alarmWidth*0.5, topPos + (bottomPos-topPos)*0.5-alarmHeight*0.5;
	var PosMUX, PosMUY = leftPos + (rightPos-leftPos)*0.5-alarmWidth*0.5, topPos + (bottomPos-topPos)*0.1;
	
	select(posStr) {
		case "居中显示" {
			alarmPosX, alarmPosY = PosMX, PosMY;
		}
		case "中上显示" {
			alarmPosX, alarmPosY = PosMUX, PosMUY;
		}
		case "左上角显示" {
			alarmPosX, alarmPosY = PosLUX, PosLUY;
		}
		case "右上角显示" {
			alarmPosX, alarmPosY = PosRUX, PosRUY;
		}
		case "右下角显示" {
			alarmPosX, alarmPosY = PosRDX, PosRDY;
		}
		case "左下角显示" {
			alarmPosX, alarmPosY = PosLDX, PosLDY;
		}
		else {
			alarmPosX, alarmPosY = PosMX, PosMY;
		}
	};
	
	return alarmPosX, alarmPosY; 
}

alarmSetWinform.timeJump = function(tm,selJumpTime){
	if(alarmSetWinform.checkbox.checked){
		select(selJumpTime) {
			case "1分钟后" {
				tm = tm.addminute(1);
			}
			case "10分钟后" {
				tm = tm.addminute(10);
			}
			case "30分钟后" {
				tm = tm.addminute(30);
			}
			case "1小时后" {
				tm = tm.addhour(1);
			}
			case "2小时后" {
				tm = tm.addhour(2);
			}
			case "6小时后" {
				tm = tm.addhour(6);
			}
			case "12小时后" {
				tm = tm.addhour(12);
			}
			case "1天后" {
				tm = tm.addday(1);
			}
			case "1周后" {
				tm = tm.addday(7);
			}
			else {
				tm = tm;
			}
		}
	}
	return tm; 
}



alarmSetWinform.plusBtn.oncommand = function(id,event){
	alarmSetWinform.plusBtn.disabled = true;
	
	var tempTime = tostring(time(alarmSetWinform.datetimepick.time,"%Y年%m月%d日")) + "  "+ alarmSetWinform.edithh.text + ":" + alarmSetWinform.editmm.text + ":" + alarmSetWinform.editss.text;
	
	//从字符串创建时间值
	var tm = time(tempTime,"%Y年%m月%d日%H时%M分%S秒");
	tm = alarmSetWinform.timeJump(tm,alarmSetWinform.快捷定时.selText);
	tempTime = tostring(tm);

	if(alarmSetWinform.plusContent.text == ""){
		taskTable[tempTime] = "闹钟来了";
	}
	else {
		taskTable[tempTime] = alarmSetWinform.plusContent.text;
	}
	
	var cmd = ..dbAlarmClock.prepare("REPLACE INTO [default] VALUES ( @time,@content);");
	cmd.step(
		time = tempTime;
		content = taskTable[tempTime];
	)
		
	var mstr = tm.month;
	var dstr = tm.day;
	var Hstr = tm.hour;
	var Mstr = tm.minute;
	var Sstr = tm.second;
	
	var AlarmContent = taskTable[tempTime];
	..logMsg("添加闹钟：",tempTime,AlarmContent)
	scheduleTable[tempTime] = alarm_taskScheduler.create(tempTime,function(AlarmContent,tempTime){
		var frmChild = win.loadForm("\dlg\alarms.aardio",,win.getDesktop());
		frmChild.updateContent(AlarmContent,tempTime);
			
		alarmSetWinform.enableDpiScaling("init");
		var alarmClockX, alarmClockY = alarmSetWinform.showPos(alarmSetWinform.显示位置.selText, frmChild.width, frmChild.height);
		win.setPos(frmChild.hwnd, alarmClockX, alarmClockY);
		
		var foregroundHwnd = win.getForeground();
		
		win.setTopmost(frmChild.hwnd);
		win.setForeground(foregroundHwnd);
		frmChild.show();
		frmChild.redrawBackground();
		win.flash(frmChild.hwnd,32);
		
	},AlarmContent,tempTime);
	
	scheduleTable[tempTime].time = { 
    	second =  Sstr ;
    	minute = Mstr ; 
    	hour = Hstr ;
    	day = dstr ;
    	month = mstr ;
	};
	
	alarmSetWinform.datetimepick.time = time.now();
	alarmSetWinform.spinhh.pos = tostring(time(__,'%H'));
	alarmSetWinform.spinmm.pos = tostring(time(__,'%M'));
	alarmSetWinform.spinss.pos = tostring(time(__,'%S'));
	alarmSetWinform.plusContent.text = "";
	
	tm.format = "%m月%d日%H:%M:%S";
	var tmstr = tostring(tm);
	
	statusbar.setText('闹钟：' + tmstr + '已添加',2 /*第几个分块*/)
	
	win.delay(1000)
	alarmSetWinform.plusBtn.disabled = false;

};

alarmSetWinform.wndproc = function(hwnd,message,wParam,lParam){
	select( message ) { 
		case 0x18/*_WM_SHOWWINDOW*/{
			alarmSetWinform.spinhh.pos = tostring(time(__,'%H'));
			alarmSetWinform.spinmm.pos = tostring(time(__,'%M'));
			alarmSetWinform.spinss.pos = tostring(time(__,'%S'));
		}
		else{

		}
	}
	//无返回值则继续调用默认回调函数
}

import win.ui.accelerator;
win.ui.accelerator({
	{ ctrl = true; vkey = 'G'#; oncommand = alarmSetWinform.plusBtn.oncommand }  
},alarmSetWinform);

alarmSetWinform.plusDel.skin(
	background = { 
		hover = "/res/images/btn-hover.png";
		focus = "/res/images/btn-focus.jpg";
		active = "/res/images/btn-active.png";
		disabled = "/res/images/btn-disabled.png"; 
	}
)
alarmSetWinform.plusDel.oncommand = function(id,event){
	var frmChild = alarmSetWinform.loadForm("\dlg\alarm_list.aardio");
	frmChild.show();
}

alarmSetWinform.bindConfig( ..cfg.alarmSettings,{
	combobox = {
		["显示位置"] = "selIndex";
	}
} );

alarmSetWinform.checkbox.oncommand = function(id,event){
	if(not alarmSetWinform.checkbox.checked){
		alarmSetWinform.快捷定时.selIndex = null;
		alarmSetWinform.快捷定时.disabled = true;
		alarmSetWinform.datetimepick.disabled = false;
		alarmSetWinform.spinhh.disabled = false;
		alarmSetWinform.edithh.disabled = false;
		alarmSetWinform.spinmm.disabled = false;
		alarmSetWinform.editmm.disabled = false;
		alarmSetWinform.spinss.disabled = false;
		alarmSetWinform.editss.disabled = false;
	}
	else {
		alarmSetWinform.快捷定时.selIndex = 1;
		alarmSetWinform.快捷定时.disabled = false;
		alarmSetWinform.datetimepick.disabled = true;
		alarmSetWinform.spinhh.disabled = true;
		alarmSetWinform.edithh.disabled = true;
		alarmSetWinform.spinmm.disabled = true;
		alarmSetWinform.editmm.disabled = true;
		alarmSetWinform.spinss.disabled = true;
		alarmSetWinform.editss.disabled = true;
	}
}

alarmSetWinform.enableDpiScaling();
//alarmSetWinform.show();
win.loopMessage();
return alarmSetWinform;