var content_css = /**


/* Variables */
/* Fonts */
/* @import url(https://fonts.googleapis.com/css?family=Open+Sans:300,700); */
//打印机媒体查询
@media print {
     body{
        -webkit-print-color-adjust:exact;
        -moz-print-color-adjust:exact;
        -ms-print-color-adjust:exact;
        print-color-adjust:exact;
    } 
    button{display:none;}
    .custom-context-menu{display:none;}
    
}

:root {
  --main-bg-color: #f7f4ed;
  --main-txt-color: #31322c;
  --main-hl-color: #fecc11;
  --main-normal-color: #31322c;
}

body {
  font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 1em;
  font-weight: 300;
  line-height: 1.5;
  letter-spacing: 0.05em;
  background-color: var(--main-bg-color);
  text : var(--main-normal-color);
  color : var(--main-normal-color);
}

/* Layout */
* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

/* TOC */
.fixed-top {
	position: fixed;
	top: 10hw;
	right: 0;
	width: 19%;
	height: 80%;
	overflow: auto;
	backdrop-filter: blur(2px);
	font-size: 0.9em;
	z-index: 1000;
}

/* Styling */
.timeline {
  margin: 4em auto;
  position: relative;
  max-width: 60em;
}
.timeline:before {
  background-color: var(--main-txt-color);
  content: '';
  margin-left: 0px;
  position: absolute;
  top: 0;
  left: 80px;
  width: 2px;
  height: 100%;
}

.timeline-event {
  position: relative;
}

@media only screen {
	.timeline-event:hover .timeline-event-icon {
  		-moz-transform: rotate(-45deg);
  		-ms-transform: rotate(-45deg);
  		-webkit-transform: rotate(-45deg);
  		transform: rotate(-45deg);
  		background-color: #801dae;
	}
	
	.timeline-event:hover .timeline-event-thumbnail {
  		-moz-box-shadow: inset 40em 0 0 0 #801dae;
  		-webkit-box-shadow: inset 40em 0 0 0 #801dae;
  		box-shadow: inset 40em 0 0 0 #801dae;
	}
}

.timeline-event-copy {
  padding-left: 1.5em;
  padding-right: 1.5em
  padding-top: 1em;
  padding-bottom: 0em;
  position: relative;
  top: -0.5em;
  left: 2em;
  width: 80%;
}
.timeline-event-copy h3 {
  font-size: 1.5em;
  margin-top: 0.3em;
  margin-bottom: 0.3em;
}
.timeline-event-copy h4 {
  font-size: 1.2em;
  margin-top: 0.2em;
  margin-bottom: 0.2em;
}
.timeline-event-copy h5 {
  font-size: 1.1em;
  margin-top: 0.1em;
  margin-bottom: 0.1em;
}
.timeline-event-copy strong {
  font-weight: 700;
}
.timeline-event-copy p:not(.timeline-event-thumbnail) {
  padding-bottom: 0.1em;
}

.timeline-event-icon {
  -moz-transition: -moz-transform 0.2s ease-in;
  -o-transition: -o-transform 0.2s ease-in;
  -webkit-transition: -webkit-transform 0.2s ease-in;
  transition: transform 0.2s ease-in;
  -moz-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
  transform: rotate(45deg);
  background-color: var(--main-txt-color);
  outline: 10px solid var(--main-bg-color);
  display: block;
  margin: 0.5em 0.5em 0.5em -0.5em;
  position: absolute;
  top: 0;
  left: 40px;
  width: 1em;
  height: 1em;
}

.timeline-event-thumbnail {
  -moz-transition: box-shadow 0.5s ease-in 0.1s;
  -o-transition: box-shadow 0.5s ease-in 0.1s;
  -webkit-transition: box-shadow 0.5s ease-in;
  -webkit-transition-delay: 0.1s;
  transition: box-shadow 0.5s ease-in 0.1s;
  color: white;
  font-size: 0.75em;
  background-color: var(--main-txt-color);
  -moz-box-shadow: inset 0 0 0 0em #bf242a;
  -webkit-box-shadow: inset 0 0 0 0em #bf242a;
  box-shadow: inset 0 0 0 0em #bf242a;
  display: inline-block;
  margin-bottom: 0.5em;
  padding: 0.25em 1em 0.2em 1em;
  color: var(--main-bg-color);
}

#listContent>li::marker {
  content: '';
}


.custom-context-menu>li::marker {
  content: '';
}

.timeline-event-disable {
	position: relative;
}
.timeline-event-disable:hover .timeline-event-icon-disable {

}

.timeline-event-disable:hover .timeline-event-thumbnail-disable {

}

.timeline-event-icon-disable {
  -moz-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
  transform: rotate(45deg);
  background-color: var(--main-txt-color);
  outline: 10px solid var(--main-bg-color);
  display: block;
  margin: 0.5em 0.5em 0.5em -0.5em;
  position: absolute;
  top: 0;
  left: 40px;
  width: 1em;
  height: 1em;
}

.timeline-event-thumbnail-disable {
  color: white;
  font-size: 0.75em;
  background-color: var(--main-txt-color);
  -moz-box-shadow: inset 0 0 0 0em #bf242a;
  -webkit-box-shadow: inset 0 0 0 0em #bf242a;
  box-shadow: inset 0 0 0 0em #bf242a;
  display: inline-block;
  margin-bottom: 0.5em;
  padding: 0.25em 1em 0.2em 1em;
  color: var(--main-bg-color);
}

.mkd strong {
  background-color: var(--main-hl-color);
}

input[type="checkbox"]:disabled {
    color: var(--main-normal-color);
}

.mkd-img {
	transition: all 0.2s linear;
}

.mkd-img:hover {
	transform: scale(1.018);
	transition: all 0.2s linear;
}

#imageOverlay {
  animation: fadeIn 0.5s;
}

@keyframes fadeIn {
  from {opacity: 0;}
  to {opacity: 1;}
}

**/; 
var content_body = /**
<ul id="listContent" class="timeline">
</ul>
**/;

var content_js = /**
<script type="text/javascript">
	var tempTable = document.createElement("ul");
	tempTable.setAttribute("id","listContentTemp");
	document.ondragstart=function(){
		return false;
	}
	
	var isInitalClick = 0;
	
	var currentImgID = 'needs2got';
	
	document.addEventListener("click", (e) => {
		hideMenu(e);
		if (isInitalClick == 0){
			console.log('isInitalClick ++;')
			isInitalClick = 1;
			window.watchImg();
		}
	});
	
	function showFullImage(fullImageUrl) {
		console.log('进入showFullImage函数了')
  		// 创建遮罩层
  		getCurrentImgID();
  		const overlay = document.createElement('div');
  		overlay.id = 'imageOverlay';
  		overlay.style.position = 'fixed';
  		overlay.style.top = '0';
  		overlay.style.left = '0';
  		overlay.style.width = '100%';
  		overlay.style.height = '100%';
  		overlay.style.backgroundColor = 'rgba(0,0,0,0.3)';
  		overlay.style.backdropFilter = "blur(6px)";
  		overlay.style.display = 'flex';
  		//overlay.style.justifyContent = 'center';
  		//overlay.style.alignItems = 'center';
  		overlay.style.zIndex = '1000';
	
  		// 创建原图容器及原图元素
  		const fullImage = document.createElement('img');
  		fullImage.id = 'imageCloned';
  		fullImage.src = fullImageUrl;
  		fullImage.title = '左上角关闭大图'
  		fullImage.style.maxWidth = '95%';
  		fullImage.style.maxHeight = '95%';
  		fullImage.style.position = 'absolute';
  		fullImage.style.boxShadow = '12px 12px 6px 6px rgba(26,26,26,.5)';
  		overlay.appendChild(fullImage);
		
		const closeIcon = document.createElement("button");
		closeIcon.id = 'closeBtn';
  		closeIcon.style.position = 'absolute';
  		closeIcon.style.top = '28px';
  		closeIcon.style.left = '28px';
  		closeIcon.innerHTML  = "关闭图片";
  		closeIcon.style.fontSize = '1.3em';
  		closeIcon.style.fontWeight = 'bolder';
  		closeIcon.style.color = '#31322c';
  		closeIcon.style.boxShadow = '6px 6px 3px 3px rgba(26,26,26,.6)';
  		overlay.appendChild(closeIcon);
  		
  		// 绑定点击遮罩层关闭功能
  		closeIcon.addEventListener('click', function() {
  			document.body.removeChild(overlay);
  		});

    	// ---------------------------------------------------------------------------------------------------
    	var result,
    	xx,
    	yy,
    	scale = 1,
    	minScale = 0.5,
    	maxScale = 4;
    	
		result = getImgSize(fullImage.naturalWidth, fullImage.naturalHeight, window.innerWidth, window.innerHeight);
    	fullImage.style.width = result.width + 'px';
    	fullImage.style.height = result.height + 'px';
    	xx = (window.innerWidth - result.width) * 0.5;
    	yy = (window.innerHeight - result.height) * 0.5;
    	fullImage.style.transform = 'translate3d(' + xx + 'px, ' + yy + 'px, 0) scale(1)';
    	
    	console.log(window.innerWidth,window.innerHeight,result.width,result.height)
    	console.log(xx,yy)

		function getImgSize(naturalWidth, naturalHeight, maxWidth, maxHeight) {
    		const imgRatio = naturalWidth / naturalHeight;
    		const maxRatio = maxWidth / maxHeight;
    		let width, height;
    		// 如果图片实际宽高比例 >= 显示宽高比例
    		if (imgRatio >= maxRatio) {
        		if (naturalWidth > maxWidth) {
            		width = maxWidth;
            		height = maxWidth / naturalWidth * naturalHeight;
        		} else {
            		width = naturalWidth;
            		height = naturalHeight;
        		}
    		} else {
        		if (naturalHeight > maxHeight) {
            		width = maxHeight / naturalHeight * naturalWidth;
            		height = maxHeight;
        		} else {
            		width = naturalWidth;
            		height = naturalHeight;
        		}
    		}
    		return { width: width, height: height }
		}

    	overlay.addEventListener('mousewheel', function (e) {
    	    e.preventDefault();
    	    
			result = getImgSize(fullImage.naturalWidth, fullImage.naturalHeight, window.innerWidth, window.innerHeight);
    		fullImage.style.width = result.width + 'px';
    		fullImage.style.height = result.height + 'px';
    		xx = (window.innerWidth - result.width) * 0.5;
    		yy = (window.innerHeight - result.height) * 0.5;

			let ratio = 1.05;
			// 缩小
			if (e.deltaY > 0) {
    			ratio = 1 / 1.05;
			}
			// 限制缩放倍数
			const _scale = scale * ratio;
			if (_scale > maxScale) {
    			ratio = maxScale / scale;
    			scale = maxScale;
			} else if (_scale < minScale) {
    			ratio = minScale / scale;
    			scale = minScale;
			} else {
    			scale = _scale;
			}
			// 目标元素是img说明鼠标在img上，以鼠标位置为缩放中心，否则默认以图片中心点为缩放中心
			if (e.target.tagName === 'img') {
    			const origin = { 
        			xx: (ratio - 1) * result.width * 0.5,
        			yy: (ratio - 1) * result.height * 0.5
    			};
    			// 计算偏移量
    			xx -= (ratio - 1) * (e.clientX - x) - origin.x;
    			yy -= (ratio - 1) * (e.clientY - y) - origin.y;
			}
			fullImage.style.transform = 'translate3d(' + xx + 'px, ' + yy + 'px, 0) scale(' + scale + ')';
			console.log(xx,yy,scale)
    	});
  		
    	// ---------------------------------------------------------------------------------------------------
    	// 拖动元素

    	//获取元素
    	var x = 0;
    	var y = 0;
    	var l = 0;
    	var t = 0;
    	var isDown = false;
	
    	//鼠标按下事件
    	fullImage.onmousedown = function(e) {
        	//获取x坐标和y坐标
        	x = e.clientX;
        	y = e.clientY;
 	
        	//获取左部和顶部的偏移量
        	l = fullImage.offsetLeft;
        	t = fullImage.offsetTop;
        	//开关打开
        	isDown = true;
        	//设置样式  
        	fullImage.style.cursor = 'move';
    	}
	
    	//鼠标移动
    	window.onmousemove = function(e) {
        	if (isDown == false) {
            	return;
        	}
        	//获取x和y
        	var nx = e.clientX;
        	var ny = e.clientY;
        	//计算移动后的左偏移量和顶部的偏移量
        	var nl = nx - (x - l);
        	var nt = ny - (y - t);
 	
        	fullImage.style.left = nl + 'px';
        	fullImage.style.top = nt + 'px';
    	}
	
    	//鼠标抬起事件
    	fullImage.onmouseup = function() {
        	//开关关闭
        	isDown = false;
        	fullImage.style.cursor = 'default';
    	}
  		document.body.appendChild(overlay);
	}

////////////////////////////////////////////////////

////////////////////////////////////////////////////
	//定义全局函数
	window.clearList = function(){
		var ListEles = document.getElementById("listContent");
		ListEles.innerHTML = "";
	};

	window.clearListTemp = function(){
		tempTable.innerHTML = "";
	}

	window.replaceList = function(){
		var ListEles = document.getElementById("listContent");
		ListEles.innerHTML = tempTable.innerHTML;
		window.watchImg();
		window.updateTOC();
	}

	window.lengthList = function(){
		var ListEles = document.getElementById("listContent");
		return ListEles.childElementCount; 
	}

	window.pushTable = function(datas){	
		var liEle = window.createLi(datas);
		tempTable.appendChild(liEle);
	};

	window.updateContent = function(datas){
		var liEle = document.getElementById(datas[0]);
		var tempEle = window.createLi(datas);
		liEle.parentNode.replaceChild(tempEle,liEle);
		window.watchImg();
		window.updateTOC();
	}

	window.removeContent = function(datas){
		var liEle = document.getElementById(datas[0]);
		liEle.remove();
	}
	
	window.watchImg = function(){
		document.querySelectorAll('.mkd-img').forEach(item => {
			if(item.getAttribute('iniclick') == 0){
				item.addEventListener('click', function() {
					showFullImage(this.getAttribute('src'));
				});
			}
			item.setAttribute('iniclick',1)
		});
	};
	
	window.createLi = function(datas){
		var isAnimated = document.querySelector(".timeline-event");
		if(isAnimated){
			var liEleClass = "timeline-event";
			var labelEleClass = "timeline-event-icon";
			var timeEleClass = "timeline-event-thumbnail";
		}
		else {
			var liEleClass = "timeline-event-disable";
			var labelEleClass = "timeline-event-icon-disable";
			var timeEleClass = "timeline-event-thumbnail-disable";
		};
		
		var liEle = document.createElement("li");
		liEle.setAttribute("class",liEleClass);
		liEle.setAttribute("id",datas[0])
		liEle.setAttribute("ondblclick","dblFunc()")
		
		var labelEle = document.createElement("label");
		labelEle.setAttribute("class",labelEleClass);
		
		var divEle = document.createElement("div");
		divEle.setAttribute("class","timeline-event-copy");
		
		var timeEle = document.createElement("p");
		timeEle.setAttribute("class",timeEleClass);
		//timeEle.setAttribute("ondblclick","dblFunc()")

		timeEle.innerText = datas[0];
		
		var titleEle = document.createElement("h2");
		titleEle.innerText = datas[1];
		var titleWrapEle = document.createElement("div");
		titleWrapEle.setAttribute("class","mkd")
		titleWrapEle.appendChild(titleEle);
		
		var contentEle = document.createElement("div");
		contentEle.setAttribute("class","mkd")
		contentEle.innerHTML = datas[2];
		
		divEle.appendChild(timeEle);
		divEle.appendChild(titleWrapEle);
		divEle.appendChild(contentEle);
		
		console.log(datas)
		if(datas[3] != 'null'){
			var imgEle = document.createElement("img");
			imgEle.setAttribute("iniclick",0)
			imgEle.setAttribute("title","点我查看大图")
			imgEle.setAttribute("class","mkd-img")
			imgEle.setAttribute("src",datas[3]);
			imgEle.setAttribute("width","100%");
			imgEle.setAttribute("height","auto");
			imgEle.setAttribute("style","max-height:450px; object-fit: scale-down;");
			divEle.appendChild(imgEle);
		}
			
		liEle.appendChild(labelEle);
		liEle.appendChild(divEle);
		return liEle;
	};

	 function setTitle(title){
		document.title = title;
	}

	function copyImgFunc() {
		console.log(currentImgID);
	    aardio.copyImg(currentImgID);
	    
	};

	function dblFunc(){
	    let currentLi = event.currentTarget;//取出当前元素
	    let timeIndex = currentLi.getAttribute("id");
	    console.log(timeIndex);
	    aardio.modifyList(timeIndex);
	}

	function download() {
		var content = document.documentElement.outerHTML;
    	var blob = new Blob([content], {type: 'text/html'});
    	var url = window.URL.createObjectURL(blob);
    	var a = document.createElement('a');
	
    	a.style = "display: none";
    	a.href = url;
    	a.download = document.title+".html";
    	document.body.appendChild(a);
    	a.click();
	
    	setTimeout(function () {
        	document.body.removeChild(a);
        	window.URL.revokeObjectURL(url);
    	}, 5);
	};

	function base64ToBlob(code) {
    	var parts = code.split(";base64,");
    	var contentType = parts[0].split(":")[1];
    	var raw = window.atob(parts[1]);
    	var rawLength = raw.length;
    	var uint8Array = new Uint8Array(rawLength);
    	for (var i = 0; i < rawLength; i++) {
        	uint8Array[i] = raw.charCodeAt(i);
    	}
    	return new Blob([uint8Array], {type: contentType});
	}

	function downloadImg(){
		if(currentImgEle.length != 0){
			currentImgBase64 = currentImgEle[0].src;
		}
		else if(currentBigImgEle.length != 0){
			currentImgBase64 = currentBigImgEle[0].src;
			console.log(currentBigImgEle);
		}
		else {
			
			return false;
		}
		
		var date = new Date();
        if (!currentImgBase64) {
            return;
        }
        var aLink = document.createElement("a"); // 创建一个a标签
        var blob = base64ToBlob(currentImgBase64);
        var event = document.createEvent("HTMLEvents");
        event.initEvent("click", true, true);
        aLink.download = date.getTime() + "_ckwb." + blob.type.split("/")[1]; // 使用时间戳给文件命名
        aLink.href = URL.createObjectURL(blob);
        aLink.click();
	}

	function getHtml(){
		var content = document.documentElement.outerHTML;
		return content; 
	};

	function Wider(){
		var timelineEle = document.querySelector(".timeline"); 
		timelineEle.style.maxWidth = '100em';
	};

	function Middle(){
		var timelineEle = document.querySelector(".timeline"); 
		timelineEle.style.maxWidth = '80em';
	};

	function Smaller(){
		var timelineEle = document.querySelector(".timeline"); 
		timelineEle.style.maxWidth = '60em';
	};

	function changeClass(className,oldClass,newClass){
		var objectNodes = document.querySelectorAll(className);
		if(objectNodes){
			objectNodes.forEach((object) => {
				var regExp = new RegExp('(?:^|\\s)' + oldClass + '(?!\\S)', 'g');
    			object.className = object.className.replace( regExp , newClass );
			});			
		};
	}

	function animationActivate(){
		changeClass(".timeline-event-disable","timeline-event-disable","timeline-event");
        changeClass(".timeline-event-icon-disable","timeline-event-icon-disable","timeline-event-icon");
        changeClass(".timeline-event-thumbnail-disable","timeline-event-thumbnail-disable","timeline-event-thumbnail");
	}

	function hexToRgba(hex) {
		var rgbaNum = 'rgba(' + parseInt('0x' + hex.slice(3, 5)) + ',' + parseInt('0x' + hex.slice(5, 7)) + ',' + parseInt('0x' + hex.slice(7, 9)) + ',' + parseInt('0x' + hex.slice(1, 3))/255 + ')'
		console.log(rgbaNum);console.log(hex);
  		return rgbaNum;
	}

	function themeSet(themeData){
		const root = document.querySelector(':root');
		root.style.setProperty('--main-bg-color', hexToRgba('#'+themeData[0]));
		root.style.setProperty('--main-txt-color', hexToRgba('#'+themeData[1]));
		root.style.setProperty('--main-hl-color', hexToRgba('#'+themeData[2]));
		root.style.setProperty('--main-normal-color', hexToRgba('#'+themeData[3]));
	}

	var currentMouseEle = document.querySelectorAll(":hover");
	var currentImgEle = document.querySelectorAll(".mkd-img:hover");
	var currentBigImgEle = document.querySelectorAll("#imageCloned:hover");
	var currentOverlayEle = document.querySelectorAll("#imageOverlay:hover");
	
	document.addEventListener("contextmenu", (e) => {
		currentMouseEle = document.querySelectorAll(":hover");
		currentImgEle = document.querySelectorAll(".mkd-img:hover");
		currentBigImgEle = document.querySelectorAll("#imageCloned:hover");
		currentOverlayEle = document.querySelectorAll("#imageOverlay:hover");
  		e.preventDefault();
  		hideMenu(e);
  		showMenu(e);
	});

	function getCurrentImgID(){
		currentMouseEle = document.querySelectorAll(":hover");
		console.log(document.querySelectorAll(":hover"))
		currentImgID = currentMouseEle[3].getAttribute("id");
	}
	

	function shiftColor(base, change, direction) {
  		const colorRegEx = /^\#?[A-Fa-f0-9]{6}$/;
		
  		// Missing parameter(s)
  		if (!base || !change) {
    		return '000000';
  		}
		
  		// Invalid parameter(s)
  		if (!base.match(colorRegEx) || !change.match(colorRegEx)) {
    		return '000000';
  		}
		
  		// Remove any '#'s
  		base = base.replace(/\#/g, '');
  		change = change.replace(/\#/g, '');
		
  		// Build new color
  		let newColor = '';
  		for (let i = 0; i < 3; i++) {
    		const basePiece = parseInt(base.substring(i * 2, i * 2 + 2), 16);
    		const changePiece = parseInt(change.substring(i * 2, i * 2 + 2), 16);
    		let newPiece = '';
		
    		if (direction === 'add') {
      		newPiece = (basePiece + changePiece);
      		newPiece = newPiece > 255 ? 255 : newPiece;
    		}
    		if (direction === 'sub') {
      		newPiece = (basePiece - changePiece);
      		newPiece = newPiece < 0 ? 0 : newPiece;
    		}
		
    		newPiece = newPiece.toString(16);
    		newPiece = newPiece.length < 2 ? '0' + newPiece : newPiece;
    		newColor += newPiece;
  		}
  		
  		newColor = '#' + newColor;
		
  		return newColor;
	}

	function isElPropColor(el, prop, color) {
  		const ctx = document.createElement('canvas').getContext('2d');
  		ctx.fillStyle = color;
  		ctx.fillRect( 0, 0, 1, 1 );
  		ctx.fillStyle = getComputedStyle(el, null).getPropertyValue(prop);
  		ctx.fillRect( 1, 0, 1, 1 );
  		const a = JSON.stringify(Array.from(ctx.getImageData(0, 0, 1, 1).data));
  		const b = JSON.stringify(Array.from(ctx.getImageData(1, 0, 1, 1).data));
  		ctx.canvas = null;
  		return a === b;
	}

	function alwaysGotColorRGBA(el, prop) {
  		const ctx = document.createElement('canvas').getContext('2d');
  		ctx.fillStyle = getComputedStyle(el, null).getPropertyValue(prop);
  		ctx.fillRect( 1, 0, 1, 1 );
  		const b = JSON.stringify(Array.from(ctx.getImageData(1, 0, 1, 1).data));
  		ctx.canvas = null;
		let textSlice = b.slice(1,-1);
		const rgbaArray = textSlice.split(",", 3);
  		console.log(rgbaArray)
  		return rgbaArray;
	}

	function RGB2HEX(rgbList) {
    	//rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    	function hex(x) {
        	return ("0" + parseInt(x).toString(16)).slice(-2);
    	}
    	return "#" + hex(rgbList[0]) + hex(rgbList[1]) + hex(rgbList[2]);
	}

	function showMenu(e) {
		var tempBgColorRGBA = alwaysGotColorRGBA(document.body, 'background-color');
		var tempBgColor = RGB2HEX(tempBgColorRGBA);
		
		var tempTxtColorRGBA = alwaysGotColorRGBA(document.body, 'color');
		var tempTxtColor = RGB2HEX(tempTxtColorRGBA);
		
		console.log(currentImgEle);
		
		if(currentImgEle.length != 0){
			const menus3 = menuImg.getInstance();
		  	menus3.style.top = `${e.clientY-20}px`;
  			menus3.style.left = `${e.clientX-6}px`;
  			menus3.style.display = "block";
  			menus3.style.position = "fixed";
  			menus3.style.border = '1px solid rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .99)';
  			menus3.style.padding = "6px 3px";
  			menus3.style.fontSize = "large";
  			menus3.style.fontWeight = "600";
  			menus3.style.backdropFilter = "blur(8px)";
  			menus3.style.boxShadow = '6px 6px 3px 3px rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .3)';
  			menus3.style.background = shiftColor(tempBgColor,"#101010",'add')
  			menus3.style.color = shiftColor(tempTxtColor,"#060606",'sub');
  			menus3.style.zIndex = '10000';
		}
		else if(currentBigImgEle.length != 0){
			const menus3 = menuImg.getInstance();
		  	menus3.style.top = `${e.clientY-20}px`;
  			menus3.style.left = `${e.clientX-6}px`;
  			menus3.style.display = "block";
  			menus3.style.position = "fixed";
  			menus3.style.border = '1px solid rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .99)';
  			menus3.style.padding = "6px 3px";
  			menus3.style.fontSize = "large";
  			menus3.style.fontWeight = "600";
  			menus3.style.backdropFilter = "blur(8px)";
  			menus3.style.boxShadow = '6px 6px 3px 3px rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .3)';
  			menus3.style.background = shiftColor(tempBgColor,"#101010",'add')
  			menus3.style.color = shiftColor(tempTxtColor,"#060606",'sub');
  			menus3.style.zIndex = '10000';
		}
		else if( currentOverlayEle.length != 0){
			return ; 
		}
		else if(currentMouseEle.length>3){
			const menus1 = menuSinglton.getInstance();
  			menus1.style.top = `${e.clientY-20}px`;
  			menus1.style.left = `${e.clientX-6}px`;
  			menus1.style.display = "block";
  			menus1.style.position = "fixed";
  			menus1.style.border = '1px solid rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .99)';
  			menus1.style.padding = "6px 3px";
  			menus1.style.fontSize = "large";
  			menus1.style.fontWeight = "600";
  			menus1.style.backdropFilter = "blur(8px)";
  			menus1.style.boxShadow = '6px 6px 3px 3px rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .3)';
  			//menus1.style.background = shiftColor("#f5f2e9","#101010",'add')
  			//menus1.style.color = "#ffffff";
  			menus1.style.background = shiftColor(tempBgColor,"#101010",'add')
  			menus1.style.color = shiftColor(tempTxtColor,"#060606",'sub')
		}
  		else {
  			const menus2 = menuLess.getInstance();
  			menus2.style.top = `${e.clientY-20}px`;
  			menus2.style.left = `${e.clientX-6}px`;
  			menus2.style.display = "block";
  			menus2.style.position = "fixed";
  			menus2.style.border = '1px solid rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .99)';
  			menus2.style.padding = "6px 3px";
  			menus2.style.fontSize = "large";
  			menus2.style.fontWeight = "600";
  			menus2.style.backdropFilter = "blur(8px)";
  			//menus2.style.boxShadow = "6px 6px 3px 3px rgba(122, 123, 120, .3)";
  			menus2.style.boxShadow = '6px 6px 3px 3px rgba(' + tempTxtColorRGBA[0] + ',' + tempTxtColorRGBA[1] + ',' + tempTxtColorRGBA[2] + ', .3)';
  			//menus2.style.background = shiftColor("#f5f2e9","#101010",'add')
  			//menus2.style.color = "#ffffff";
  			menus2.style.background = shiftColor(tempBgColor,"#101010",'add')
  			menus2.style.color = shiftColor(tempTxtColor,"#060606",'sub')
  		}
	}

	function hideMenu(e) {
  		const menus1 = menuSinglton.getInstance();
  		menus1.style.display = "none";
  		const menus2 = menuLess.getInstance();
  		menus2.style.display = "none";
		const menus3 = menuImg.getInstance();
  		menus3.style.display = "none";
	}
	
	const ContextMenuSinglton = function (options) {
  	// 唯一实例
  		let instance;
		
  		// 创建实例方法
  		function createMenu() {
  			const ul = document.createElement("ul");
  			ul.classList.add("custom-context-menu");
  			const { menus } = options;
  			if (menus && menus.length > 0) {
    			for (let menu of menus) {
      				const li = document.createElement("li");
      				li.textContent = menu.name;
      				li.onclick = menu.onClick;
      				ul.appendChild(li);
    			}
  			}
  			const body = document.querySelector("body");
  			body.appendChild(ul);
  			return ul;
  		}
		
  		return {
    		// 获取实例的唯一方式
    		getInstance: function () {
      			if (!instance) {
        			instance = createMenu();
      			}
      			return instance;
    		},
  		};
	};

	const ContextMenuLess = function (options) {
  	// 唯一实例
  		let instance;
		
  		// 创建实例方法
  		function createMenu() {
  			const ul = document.createElement("ul");
  			ul.classList.add("custom-context-menu");
  			const { menus } = options;
  			if (menus && menus.length > 0) {
    			for (let menu of menus) {
      				const li = document.createElement("li");
      				li.textContent = menu.name;
      				li.onclick = menu.onClick;
      				ul.appendChild(li);
    			}
  			}
  			const body = document.querySelector("body");
  			body.appendChild(ul);
  			return ul;
  		}
		
  		return {
    		// 获取实例的唯一方式
    		getInstance: function () {
      			if (!instance) {
        			instance = createMenu();
      			}
      			return instance;
    		},
  		};
	};

	const ContextMenuImg = function (options) {
  	// 唯一实例
  		let instance;
		
  		// 创建实例方法
  		function createMenu() {
  			const ul = document.createElement("ul");
  			ul.classList.add("custom-context-menu");
  			const { menus } = options;
  			if (menus && menus.length > 0) {
    			for (let menu of menus) {
      				const li = document.createElement("li");
      				li.textContent = menu.name;
      				li.onclick = menu.onClick;
      				ul.appendChild(li);
    			}
  			}
  			const body = document.querySelector("body");
  			body.appendChild(ul);
  			return ul;
  		}
		
  		return {
    		// 获取实例的唯一方式
    		getInstance: function () {
      			if (!instance) {
        			instance = createMenu();
      			}
      			return instance;
    		},
  		};
	};

	const menuSinglton = ContextMenuSinglton({
  		menus: [
    		{
      			name: "刷新",
      			onClick: function (e) {
        			aardio.flush();
      			},
    		},
    		{
      			name: "编辑此项",
      			onClick: function (e) {
      			    if(currentMouseEle.length>3){
				    	console.log(currentMouseEle[3]);
				    	let currentMouseEleLi = currentMouseEle[3];
	    				let timeIndex = currentMouseEleLi.getAttribute("id");
	    				console.log(timeIndex);
	    				aardio.modifyList(timeIndex);
      			    };
      			},
    		},
    		{
      			name: "关闭动画",
      			onClick: function (e) {
      			    hideMenu(e);
        			changeClass(".timeline-event","timeline-event","timeline-event-disable");
        			changeClass(".timeline-event-icon","timeline-event-icon","timeline-event-icon-disable");
        			changeClass(".timeline-event-thumbnail","timeline-event-thumbnail","timeline-event-thumbnail-disable");
      			},
    		},
    		{
      			name: "打开动画",
      			onClick: function (e) {
      			    hideMenu(e);
        			changeClass(".timeline-event-disable","timeline-event-disable","timeline-event");
        			changeClass(".timeline-event-icon-disable","timeline-event-icon-disable","timeline-event-icon");
        			changeClass(".timeline-event-thumbnail-disable","timeline-event-thumbnail-disable","timeline-event-thumbnail");
      			},
    		},
    		{
      			name: "显示范围：宽",
      			onClick: function (e) {
      			    hideMenu(e);
        			Wider();
      			},
    		},
    		{
      			name: "显示范围：中",
      			onClick: function (e) {
      			    hideMenu(e);
        			Middle();
      			},
    		},
    		{
      			name: "显示范围：窄",
      			onClick: function (e) {
      			    hideMenu(e);
        			Smaller();
      			},
    		},
    		{
      			name: "导出为pdf",
      			onClick: function (e) {
      			    hideMenu(e);
        			window.print();
      			},
    		},
    		{
      			name: "保存为html",
      			onClick: function (e) {
      			    hideMenu(e);
					download();
      			},
    		},
  		],
	});

	const menuImg = ContextMenuImg({
  		menus: [
    		{
      			name: "  下载图片    ",
      			onClick: function (e) {
      			    hideMenu(e);
        			downloadImg();
      			},
    		},
    		
    		{
      			name: "  复制图片    ",
      			onClick: function (e) {
      			    hideMenu(e);
        			copyImgFunc();
      			},
    		},
  		],
	});

	const menuLess = ContextMenuLess({
  		menus: [
    		{
      			name: "刷新",
      			onClick: function (e) {
      			    hideMenu(e);
        			aardio.flush();
      			},
    		},
    		{
      			name: "关闭动画",
      			onClick: function (e) {
      			    hideMenu(e);
        			changeClass(".timeline-event","timeline-event","timeline-event-disable");
        			changeClass(".timeline-event-icon","timeline-event-icon","timeline-event-icon-disable");
        			changeClass(".timeline-event-thumbnail","timeline-event-thumbnail","timeline-event-thumbnail-disable");
      			},
    		},
    		{
      			name: "打开动画",
      			onClick: function (e) {
      			    hideMenu(e);
        			changeClass(".timeline-event-disable","timeline-event-disable","timeline-event");
        			changeClass(".timeline-event-icon-disable","timeline-event-icon-disable","timeline-event-icon");
        			changeClass(".timeline-event-thumbnail-disable","timeline-event-thumbnail-disable","timeline-event-thumbnail");
      			},
    		},
    		{
      			name: "显示范围：宽",
      			onClick: function (e) {
      			    hideMenu(e);
        			Wider();
      			},
    		},
    		{
      			name: "显示范围：中",
      			onClick: function (e) {
      			    hideMenu(e);
        			Middle();
      			},
    		},
    		{
      			name: "显示范围：窄",
      			onClick: function (e) {
      			    hideMenu(e);
        			Smaller();
      			},
    		},
    		{
      			name: "导出为pdf",
      			onClick: function (e) {
      			    hideMenu(e);
        			window.print();
      			},
    		},
    		{
      			name: "保存为html",
      			onClick: function (e) {
      			    hideMenu(e);
					download();
      			},
    		},
  		],
	});

	document.onkeydown = function (e) {
    	var key = e.keyCode;
    	//便于说明，下面代码使用多个if，应用时可使用"||"合并
    	if (key == 116) {
        	//禁用F5刷新
        	return false;
    	} else if(event.ctrlKey && key==82){
        	//禁用ctrl+R刷新
        	return false;
    	}
	};
	
////////////////////////////////////////////////////////////////////
//TOC
////////////////////////////////////////////////////////////////////
  class TOC {
    /**
     * @param {[HTMLHeadingElement]} headingSet
     * */
    static parse(headingSet) {
      const tocData = []
      let curLevel = 0
      let preTocItem = undefined
      let idFlag = 1

      headingSet.forEach(heading => {
        const hLevel = heading.outerHTML.match(/<h([\d]).*>/)[1]
        console.log(hLevel)
        const titleText = heading.innerText

        switch (hLevel >= curLevel) {
          case true:
            if (preTocItem === undefined) {
              preTocItem = new TocItem(titleText, hLevel)
              tocData.push(preTocItem)
            } else {
              const curTocItem = new TocItem(titleText, hLevel)
              const parent = curTocItem.level > preTocItem.level ? preTocItem : preTocItem.parent
              curTocItem.parent = parent
              parent.children.push(curTocItem)
              preTocItem = curTocItem
            }
            break
          case false:
            // We need to find the appropriate parent node from the preTocItem
            const curTocItem = new TocItem(titleText, hLevel)
            while (1) {
              if (preTocItem.level < curTocItem.level) {
                preTocItem.children.push(curTocItem)
                preTocItem = curTocItem
                break
              }
              preTocItem = preTocItem.parent

              if (preTocItem === undefined) {
                tocData.push(curTocItem)
                preTocItem = curTocItem
                break
              }
            }
            break
        }

        curLevel = hLevel

        if (heading.id === "") {
          let tmpId = titleText.replace(/\s+/g,"_").toLowerCase() + "-toc-" + idFlag.toString();
          heading.id = tmpId;
        }
        preTocItem.id = heading.id;
        idFlag += idFlag;
        console.log(preTocItem.id)
      })

      return tocData
    }

    /**
     * @param {[TocItem]} tocData
     * @return {string}
     * */
    static build(tocData) {
      let result = "<ul>"
      tocData.forEach(toc => {
        result += `<li><a href=#${toc.id}>${toc.text}</a></li>`
        if (toc.children.length) {
          result += `${TOC.build(toc.children)}`
        }
      })
      return result + "</ul>"
    }
  }

  /**
   * @param {string} text
   * @param {int} level
   * @param {TocItem} parent
   * */
  function TocItem(text, level, parent = undefined) {
    this.text = text
    this.level = level
    this.id = undefined
    this.parent = parent
    this.children = []
  }
  
	window.updateTOC = () => {
		const oldTOC = document.querySelector(".fixed-top");
		if(oldTOC){
			console.log("delete old TOC")
			oldTOC.remove();
		}
		
		console.log('Hs Querying...')
    	const headingSet = document.querySelectorAll("h1, h2, h3, h4, h5, h6") // You can also select only the titles you are interested in.
    	console.log(headingSet)
    	
    	console.log('Rdy to Parse Datas...')
    	const tocData = TOC.parse(headingSet)
    	
    	console.log('TOC Data: ')
    	console.log(tocData)
	
    	const tocHTMLContent = TOC.build(tocData)
    	const frag = document.createRange().createContextualFragment(`<fieldset class="fixed-top"><legend>TOC</legend>${tocHTMLContent}</fieldset>`)
    	document.querySelector(`body`).insertBefore(frag, document.querySelector(`body`).firstChild)
	}
  
</script>
**/;

return content_css,content_body,content_js; 