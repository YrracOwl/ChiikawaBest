import win.ui;
/*DSG{{*/
mainForm = win.form(text="atoms";right=220;bottom=118;border="none";max=false)
mainForm.add(
bk={cls="bk";left=0;top=0;right=224;bottom=120;ah=1;aw=1;background="\res\keai.jpg";z=1}
)
/*}}*/

//////////////////////////////////////////////////////////////////////
//Libray导入
//////////////////////////////////////////////////////////////////////
//process库导入
import process;

//sqlite导入
import sqlite;

//托盘库
import win.ui.menu;
import win.util.tray;

//配置设置
import fsys.config;
appName = "/appvar/";
cfgPath = io.appData(appName+"app.config");
cfg = fsys.config(cfgPath);

//为了访问本地文件而采用异步http服务器
//异步可能会阻塞进程，所以采用了多线程http服务器
import wsock.tcp.simpleHttpServer;
namespace wsock.tcp.simpleHttpServer{
	//startIp = "0.0.0.0"; //不限制本机 IP
    //startPort = 8615; //不指定端口时会自动分配空闲端口
    threadGlobal = { mainForm = ..mainForm }; //指定 HTTP 服务线程的默认全局变量,注意定义线程函数的作用域同名变量不能是局部变量
}

//////////////////////////////////////////////////////////////////////
//全局变量
//////////////////////////////////////////////////////////////////////

//设置：webview2与inet代理
if(cfg.proxy_setting){
	if(cfg.proxy_setting.使用http代理){
		launch_params = "--proxy-server=http://" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本 + "  --accept-lang=zh-CN";
		inet_launch_params = "HTTP=HTTP://" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本;
	}
	elseif(cfg.proxy_setting.使用socks5代理){
		launch_params = "--proxy-server=SOCKS5://" + cfg.proxy_setting.地址文本s + ":" + cfg.proxy_setting.端口文本s + "  --accept-lang=zh-CN";
		inet_launch_params = "SOCKS=" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本;
	}
	else {
		launch_params = "--accept-lang=zh-CN";
		inet_launch_params = " ";
	}
}
else {
	launch_params = "--accept-lang=zh-CN";
	inet_launch_params = " ";
}

//设置：webview2用户数据位置
wbUserDataDir = io.appData(appName+"userDataDir");
wbHistoryDir = wbUserDataDir+"\EBWebView\Default\"; 

//设置：数据库设置
dbDir = io.appData(appName+"database");
if(not io.exist(dbDir)){
	io.createDir(dbDir);
}

//Base数据库路径
dbBasePath = dbDir+"/base.db"
dbBase = sqlite(dbBasePath);
//Timeline数据库路径
dbTimelinePath = dbDir+"/timeline.db";
dbTimeline = sqlite(dbTimelinePath);

if( not dbTimeline.existsTable("default") ){ 
	dbTimeline.exec( "CREATE TABLE [default] (time, title, content);"); 
}

if( not dbTimeline.existsTable("timeline") ){ 
	dbTimeline.exec( "CREATE TABLE [timeline] (name, time);");
	var cmd = dbTimeline.prepare("REPLACE INTO [timeline] VALUES ( @name,@time);");
	cmd.step(
		name = "default";
		time = time.now();
	)
}


//////////////////////////////////////////////////////////////////////
//设置：托盘消息
//////////////////////////////////////////////////////////////////////


mainForm.onTrayMessage = {
	[0x205/*_WM_RBUTTONUP*/  ] = function(wParam){ 
		win.setForeground(mainForm.hwnd);
		/*
		下面创建托盘弹出菜单。
		如果程序要开机启动到托盘，最好在这里创建菜单，在用户点击前不要创建菜单，
		避免系统启动时 DPI 缩放前创建的菜单字体偏小（出现这情况的机率很小）。
		如果不想重复创建菜单最好写到一个库里，然后在这里 import 即可避免上述问题。
		*/
		import win.ui.menu;
		mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单
    	stat = win.isVisible(mainForm.hwnd);
    	if(stat){
    	    mainForm.popmenu.add("&隐藏主窗口",function(id){
				mainForm.show(false);
			});
    	}else {
    	    mainForm.popmenu.add("&显示主窗口",function(id){
				mainForm.show(true);
			});
    	}
		
		mainForm.popmenu.add();//分隔线
		mainForm.popmenu.add("&设置",function(){
			var settings1 = mainForm.loadForm("\dlg\settings.aardio");
			settings1.show();
		})
		
		mainForm.popmenu.add();//分隔线
		mainForm.popmenu.add("&网页监控",function(){
			var webwatcher1 = mainForm.loadForm("\dlg\webwatcher.aardio");
			webwatcher1.show();
		})
		mainForm.popmenu.add("&时间线",function(){
			var timeline1 = mainForm.loadForm("\dlg\timeline.aardio");
			timeline1.show();
		})
		
		mainForm.popmenu.add();//分隔线
		mainForm.popmenu.add("&打开数据文件夹",function(){
			process("explorer.exe",io.appData(appName))
		})
		
		mainForm.popmenu.add("&应用日志",function(){
			logForm.show();
		})
		
		mainForm.popmenu.add();//分隔线
		mainForm.popmenu.add('&退出',function(id){ 
			mainForm.close();
		})
		mainForm.popmenu.popup();
	    mainForm.popmenu.close();
		
	};
	[0x202/*_WM_LBUTTONUP*/] = function(wParam){ 
		
	};
	[0x203/*_WM_LBUTTONDBLCLK*/] = function(wParam){ 
		mainForm.show(true);
	};
	[0x404/*_PARAM_DESTROY*/] = function(wParam){ 
		
	};
	[0x405/*_PARAM_CLICKED*/] = function(wParam){ 
		
	};
}

mainForm.onClose = function(hwnd,message,wParam,lParam){
    cleanHistory();
    fadeHide();
}

var minimize_1st_show = true; 

mainForm.onMinimize = function(lParam){
	mainForm.show(false); //隐藏窗口
	if(!cfg.apps_setting.启动到托盘 and minimize_1st_show){
		minimize_1st_show = false;
		mainForm.tray.pop("应用已启动，右击托盘获取更多菜单","Atoms",,3000);
	}
    //mainForm.popmenu.setString(1,"显示")
    return true;//阻击默认消息传递，取消最小化过程
}

//////////////////////////////////////////////////////////////////////
//自定义函数
//////////////////////////////////////////////////////////////////////

//log函数
logForm = mainForm.loadForm("\dlg\log.aardio");
logForm.show(false);
logInfo = function(text){
	logForm.richedit.appendText(text)
	logForm.richedit.appendText("    ")
}


//渐隐扩散特效
fadeHide = function(){
    for(i=17;1;-1){
        mainForm.transparent( i * 10);
        x,y,cx,cy = mainForm.getPos();
        mainForm.setPos(x-1,y-1,cx+2,cy+2);
        win.delay(5);
    };  
    win.quitMessage();
}

//清除用户webview2数据
cleanHistory = function(){
	if(cfg.apps_setting){
    	if(cfg.apps_setting.关闭时清空记录){
    	    if(io.exist(wbHistoryDir + "Visited Links")){
    	    	mainForm.msgbox("3秒后即将清理历史记录","注意",0,3000)
    			if(io.remove(wbHistoryDir + "Visited Links") and io.remove(wbHistoryDir + "History") and io.remove(wbHistoryDir + "History-journal")){
    				mainForm.msgbox("清理成功！即将自动退出！", "恭喜！",0,1200)
    			}
    			else {
    				mainForm.msgbox("清理失败！请手动清理！即将自动退出！", "注意！",0,2000)
    			}
    	    }
			else {
				mainForm.msgbox("没有历史记录！即将自动退出！","恭喜！",0,1000)
			}
			
    	}
	}
}

//多线程写数据库函数
//创建线程  
thrdWriteDBFunc = function(db_path,str_prepare,str_step){

    import sqlite;
    var db = sqlite(db_path)
    
    //多线程冲突锁定时的重试次数
    db.busyTimeout(10000);
    thread.lock("PRINT",λ() io.print("正在写数据库,线程ID:",thread.getId()) )

    var command = db.prepare(str_prepare) 
    for(i=1;10;1){
        command.step(str_step)
    } 

    command.finalize();
    db.close();
} 

//////////////////////////////////////////////////////////////////////
//创建托盘图标
//////////////////////////////////////////////////////////////////////

mainForm.tray = win.util.tray(mainForm) //创建托盘图标
mainForm.tray.tip = "右键打开菜单" //设置鼠标提示

import win.ui.simpleWindow;
win.ui.simpleWindow(mainForm,,,18,).skin(
	background = { 
		hover = 0xff99ffcc;
		active = 0xffff6666; 
		default = 0x00000000; 
	}
	color = { 
		hover = 0xff666666;
		active = 0xffffffff; 
		default = 0xFF7BA5BF; 
	}
)


//主窗口是否显示
if(cfg.apps_setting.启动到托盘){
	mainForm.tray.pop("应用已启动，右击托盘获取更多菜单","Atoms",,3000);
}
else {
	mainForm.show();
}

return win.loopMessage();