import win.ui;
import win.ui.atom;
/*DSG{{*/
mainForm = win.form(text="ChiikawaBest";right=220;bottom=118;border="none";max=false;min=false)
mainForm.add(
bk={cls="bk";left=0;top=0;right=224;bottom=120;ah=1;aw=1;background="\res\keai.jpg";z=1}
)
/*}}*/

if(#_CMDLINE){
	import string.list;
	arg = string.list( _CMDLINE ,";");
	
	if(arg.operation == "update"){
		import fsys;
		import process;
		sleep(100);
		
		fsys.copy(io._exepath,arg.path);
		process.execute(arg.path,'operation=slowStart');
		win.quitMessage();
		return ; 
	}
	elseif(arg.operation == "slowStart"){
		sleep(2000);
	}
}

var atom,hwnd/*冲突窗口的句柄,该函数会自动激活此窗口*/ = mainForm.atom("3C6F3EEC-7B25-44F1-B612-FBAA2319827D");
if(!atom){
	/*为窗口设置原子值可以避免一个程序重复运行多个实例*/
	//win.show(hwnd,0x9/*_SW_RESTORE*/);
	//win.setForeground(hwnd);
	win.msgbox("程序已启动！请查看托盘！","ChiikawaBest",0,0,1200)
	win.quitMessage();
	return;
}

//////////////////////////////////////////////////////////////////////
//Libray导入
//////////////////////////////////////////////////////////////////////
import fsys.version;
mainForm.appVersion = "";
if( !_STUDIO_INVOKED ){
	var versionInfo = fsys.version.getInfo( io._exepath )
	mainForm.appVersion = tostring(versionInfo.productVersion["major"]) + '.' +tostring(versionInfo.productVersion["minor"]) + '.' +tostring(versionInfo.productVersion["build"]) + '.' +tostring(versionInfo.productVersion["revision"]);
	mainForm.copyright = versionInfo.copyright;
}

//fsys的删除库
import fsys.remove;

//process库导入
import process;

//inet.downBox导入
import inet.downBox;

//gid库导入用于翻转颜色
import gdi;

//sqlite导入
import sqlite;

//托盘库
import win.ui.menu;
import win.util.tray;

//自定义窗口外观
import win.ui.simpleWindow;
win.ui.simpleWindow(mainForm,,,18,).skin(
	background = { 
		hover = 0xff99ffcc;
		active = 0xffff6666; 
		default = 0x00000000; 
	}
	color = { 
		hover = 0xff666666;
		active = 0xffffffff; 
		default = 0xFF7BA5BF; 
	}
)

//配置设置

mainForm.updateStatus = true;
mainForm.updateStatusText = "检测更新";

import fsys.config;
appName = "/ChiikawaBest/";
cfgPath = io.appData(appName+"app.config");
cfg = fsys.config(cfgPath);

//为了访问本地文件而采用异步http服务器
//异步可能会阻塞进程，所以采用了多线程http服务器
import wsock.tcp.simpleHttpServer;
namespace wsock.tcp.simpleHttpServer{
	//startIp = "0.0.0.0"; //不限制本机 IP
    //startPort = 8615; //不指定端口时会自动分配空闲端口
    threadGlobal = { mainForm = ..mainForm }; //指定 HTTP 服务线程的默认全局变量,注意定义线程函数的作用域同名变量不能是局部变量
}

//////////////////////////////////////////////////////////////////////
//全局变量
//////////////////////////////////////////////////////////////////////

//设置：webview2与inet代理
if(cfg.proxy_setting){
	if(cfg.proxy_setting.使用http代理){
		launch_params = "--proxy-server=http://" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本 + "  --accept-lang=zh-CN";
		inet_launch_params = "HTTP=HTTP://" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本;
	}
	elseif(cfg.proxy_setting.使用socks5代理){
		launch_params = "--proxy-server=SOCKS5://" + cfg.proxy_setting.地址文本s + ":" + cfg.proxy_setting.端口文本s + "  --accept-lang=zh-CN";
		inet_launch_params = "SOCKS=" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本;
	}
	else {
		launch_params = "--accept-lang=zh-CN";
		inet_launch_params = " ";
	}
}
else {
	launch_params = "--accept-lang=zh-CN";
	inet_launch_params = " ";
}

//更新下载路径
updateFilePath = io.appData(appName+"updateFile/");
updateBox = inet.downBox(mainForm,"检查更新",true);
/*
import console;
console.log(updateFilePath)
*/

//设置：webview2用户数据位置
wbUserDataDir = io.appData(appName+"userDataDir");
wbHistoryDir = wbUserDataDir+"\EBWebView\Default\"; 

//设置：数据库设置
dbDirBackUp = io.appData(appName+"databaseBackups");
dbDir = io.appData(appName+"database");
if(not io.exist(dbDir)){
	io.createDir(dbDir);
}

if(not io.exist(dbDirBackUp)){
	io.createDir(dbDirBackUp);
}

//Base数据库路径
dbBasePath = dbDir+"/base.db"
dbBase = sqlite(dbBasePath);
//Timeline数据库路径
dbTimelinePath = dbDir+"/timeline.db";
dbTimeline = sqlite(dbTimelinePath);

//AlarmClock数据库路径
dbAlarmClockPath = dbDir+"/alarmClock.db";
dbAlarmClock = sqlite(dbAlarmClockPath);

if( not dbTimeline.existsTable("default") ){ 
	dbTimeline.exec( "CREATE TABLE [default] (time PRIMARY KEY, title, content);"); 
}

if( not dbBase.existsTable("timeline") ){ 
	dbBase.exec( "CREATE TABLE [timeline] (name PRIMARY KEY, time);");
	var cmd = dbBase.prepare("REPLACE INTO [timeline] VALUES ( @name,@time);");
	cmd.step(
		name = "default";
		time = time.now();
	)
}

if( not dbAlarmClock.existsTable("default")){
	dbAlarmClock.exec( "CREATE TABLE [default] (time PRIMARY KEY, content);"); 
}

//////////////////////////////////////////////////////////////////////
//设置：托盘消息
//////////////////////////////////////////////////////////////////////

mainForm.trayCreate = function(){
	win.setForeground(mainForm.hwnd);
	/*
	下面创建托盘弹出菜单。
	如果程序要开机启动到托盘，最好在这里创建菜单，在用户点击前不要创建菜单，
	避免系统启动时 DPI 缩放前创建的菜单字体偏小（出现这情况的机率很小）。
	如果不想重复创建菜单最好写到一个库里，然后在这里 import 即可避免上述问题。
	*/
	import win.ui.menu;
	mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单
    stat = win.isVisible(mainForm.hwnd);
    if(stat){
    	mainForm.popmenu.add("隐藏主窗口",function(id){
			mainForm.show(false);
		});
    }else {
    	mainForm.popmenu.add("显示主窗口",function(id){
			mainForm.show(true);
			win.setForeground(mainForm.hwnd)
		});
    }
	
	mainForm.popmenu.add();//分隔线
	mainForm.popmenu.add("设置",function(){
		var settings1 = mainForm.loadForm("\dlg\settings.aardio");
		settings1.show();
	})
	
	mainForm.popmenu.add();//分隔线
	mainForm.popmenu.add("网页监控",function(){
		webwatcher.show();
	})
	mainForm.popmenu.add("时间线",function(){
		var timeline1 = mainForm.loadForm("\dlg\timeline_choice.aardio");
		timeline1.show();
	})
	mainForm.popmenu.add("闹钟",function(){
		alarmForm.show();
	})
	
	mainForm.popmenu.add();//分隔线
	mainForm.popmenu.add("打开数据文件夹",function(){
		process("explorer.exe",io.appData(appName))
	})
	
	mainForm.popmenu.add("应用日志",function(){
		logForm.show();
	})
	
	mainForm.popmenu.add();//分割线
	mainForm.popmenu.add("版本："+mainForm.appVersion,function(){	
		var frmChild = mainForm.loadForm("\dlg\productDescription.aardio");
		frmChild.show();
	})
	if(mainForm.updateStatus){//检查更新
		mainForm.popmenu.add("检测更新",function(){
			mainForm.checkUpdate();
		});
	}
	else {
		mainForm.popmenu.add("检测更新中...",function(){});
	};
	

	mainForm.popmenu.add();//分隔线
	mainForm.popmenu.add('退出',function(id){
		mainForm.onClose = null;
		mainForm.onClose = function(hwnd,message,wParam,lParam){
			webwatcher.onClose = null;
			webwatcher.close();
			cleanHistory();
    		fadeHide();	
		}
		mainForm.close();
	})
	mainForm.popmenu.popup();
	mainForm.popmenu.close();
}


mainForm.onTrayMessage = {
	[0x205/*_WM_RBUTTONUP*/] = function(wParam){
		mainForm.trayCreate();
	};
	[0x201/*_WM_LBUTTONDOWN*/] = function(wParam){
		mainForm.show(true);
		win.setForeground(mainForm.hwnd)
	};
	[0x203/*_WM_LBUTTONDBLCLK*/] = function(wParam){

	};
	[0x404/*_PARAM_DESTROY*/] = function(wParam){ 
		
	};
	[0x405/*_PARAM_CLICKED*/] = function(wParam){ 
		
	};
}

mainForm.onClose = function(hwnd,message,wParam,lParam){
	mainForm.show(false); //隐藏窗口
	if(!cfg.apps_setting.启动到托盘 and minimize_1st_show){
		minimize_1st_show = false;
		mainForm.tray.pop("应用已启动，右击托盘获取更多菜单","ChiikawaBest",,3000);
	}
    //mainForm.popmenu.setString(1,"显示")
    return true;//阻击默认消息传递，取消最小化过程
}


var minimize_1st_show = true; 

mainForm.onMinimize = function(lParam){
	mainForm.show(false); //隐藏窗口
	if(!cfg.apps_setting.启动到托盘 and minimize_1st_show){
		minimize_1st_show = false;
		mainForm.tray.pop("应用已启动，右击托盘获取更多菜单","ChiikawaBest",,3000);
	}
    //mainForm.popmenu.setString(1,"显示")
    return true;//阻击默认消息传递，取消最小化过程
}

//////////////////////////////////////////////////////////////////////
//计划任务
//////////////////////////////////////////////////////////////////////

//计划任务导入
import win.taskScheduler;
webWatcher_taskScheduler = win.taskScheduler(mainForm);


//////////////////////////////////////////////////////////////////////
//自定义函数
//////////////////////////////////////////////////////////////////////

//检查更新函数
mainForm.updateStart = function(){
	var updateUrl = "https://ghps.cc/https://raw.githubusercontent.com/YrracOwl/ChiikawaBest/master/dist/ChiikawaBest.exe";
	if(cfg.apps_setting.edit){
		updateUrl = cfg.apps_setting.edit;
	};
	var confirmed = mainForm.msgboxTest("确定更新并自动重启吗？","更新中...");
	if(confirmed){
		updateBox.download(updateUrl,updateFilePath,,,inet_launch_params)
		mainForm.msgbox("下载已完成，即将重启","即将重启",,1600);
		mainForm.onClose = null;
		var currentPath = io._exepath;
		process.execute(updateFilePath+"ChiikawaBest.exe",'operation=update;path='+currentPath);
		mainForm.close();
		mainForm.updateStatus = true;
	}
}


mainForm.checkUpdate = function(){
	mainForm.updateStatus = false;
	var updateUrl = "https://raw.githubusercontent.com/YrracOwl/ChiikawaBest/master/dist/ChiikawaBest.exe";
	if(cfg.apps_setting.edit){
		updateUrl = cfg.apps_setting.edit;
	};
	
	var ok = thread.invokeAndWait(
		function(updateUrl,updateFilePath,inet_launch_params){
			import win;
			import inet.downBox;
			updateBox = inet.downBox(win.getDesktop(),"检查更新",true);
			var ok = updateBox.test(updateUrl,updateFilePath,,,inet_launch_params);
			return ok; 
		},updateUrl,updateFilePath,inet_launch_params
	);
	
	mainForm.updateStatus = true;
	
	if(ok){
		var wannaForceUpdate = mainForm.msgboxTest("服务器无更新，是否强制拉取更新并重启","检测更新");
		if(wannaForceUpdate){
			fsys.remove(updateFilePath);
			mainForm.updateStart();
		}
		else {
			return; 
		}
	}
	elseif( ok === null){
		mainForm.msgboxErr("下载错误！HTTP错误代码:"+ ( updateBox.statusCode : ""));
		return; 
	}
	mainForm.updateStart();
}



//log函数
logForm = mainForm.loadForm("\dlg\log.aardio");
logForm.show(false);

logMsg = function(...){
	logInfo("消息",...);
}

logWarn = function(...){
	logInfo("警告",...);
}

logErr = function(...){
	logInfo("错误",...);
}

logWrite = function(...){
	logInfo("写入",...);
}


logInfo = function(infoType, ...){
	var colorSet = {
	//0xbbggrr
	0xffffff;//1白色
	0x000000;//2黑色
	0x0000ff;//3正红色
	0x00ff00;//4正绿色
	0xff0000;//5正蓝色
	0x349bdb;//6黄不老
	0x1d16c8;//7丹雘
	0x6b4e35;//8青雀头黛
	0x84a71b;//9竹绿
	}; 
	var color = colorSet[2]; 
	var bkcolor = colorSet[1]; 
	select(infoType) {
		case "消息" {
			color = colorSet[8];
		}
		case "警告" {
			color = colorSet[6];
		}
		case "错误" {
			color = colorSet[7];
		}
		case "写入" {
			color = colorSet[9];
		}
		else {
			color = colorSet[2];
		}
	};
	
	logForm.richedit.appendText("[ "+infoType+" ] " + tostring(time.now()),": ")
	var arg = { ... };
	for(k,v in arg){
		logForm.richedit.appendText(tostring(v))
		logForm.richedit.appendText(" ")
	}
	logForm.richedit.appendText('\r\n')
	logForm.richedit.lineSel(-2);
	logForm.richedit.setSelCharformat(textColor = color);
	logForm.richedit.deselect();
}


//渐隐扩散特效
fadeHide = function(){
    for(i=17;1;-1){
        mainForm.transparent( i * 10);
        x,y,cx,cy = mainForm.getPos();
        mainForm.setPos(x-1,y-1,cx+2,cy+2);
        win.delay(5);
    };  
    win.quitMessage();
}

//清除用户webview2数据
cleanHistory = function(){
	if(cfg.apps_setting){
    	if(cfg.apps_setting.关闭时清空记录){
    	    if(io.exist(wbHistoryDir + "Visited Links")){
    	    	mainForm.msgbox("3秒后即将清理历史记录","注意",0,3000)
    			if(io.remove(wbHistoryDir + "Visited Links") and io.remove(wbHistoryDir + "History") and io.remove(wbHistoryDir + "History-journal")){
    				mainForm.msgbox("清理成功！即将自动退出！", "恭喜！",0,1200)
    			}
    			else {
    				mainForm.msgbox("清理失败！请手动清理！即将自动退出！", "注意！",0,2000)
    			}
    	    }
			else {
				mainForm.msgbox("没有历史记录！即将自动退出！","恭喜！",0,1000)
			}
			
    	}
	}
}

//多线程写数据库函数
//创建线程  
thrdWriteDBFunc = function(db_path,str_prepare,str_step){

    import sqlite;
    var db = sqlite(db_path)
    
    //多线程冲突锁定时的重试次数
    db.busyTimeout(10000);
    thread.lock("PRINT",λ() io.print("正在写数据库,线程ID:",thread.getId()) )

    var command = db.prepare(str_prepare) 
    for(i=1;10;1){
        command.step(str_step)
    } 

    command.finalize();
    db.close();
} 

//全局闹钟
alarmForm = mainForm.loadForm("\dlg\add_alarm.aardio");

//全局网页监控
webwatcher = mainForm.loadForm("\dlg\webwatcher.aardio");
webwatcherPrcsCntShot = 0;

//////////////////////////////////////////////////////////////////////
//创建托盘图标
//////////////////////////////////////////////////////////////////////

mainForm.tray = win.util.tray(mainForm) //创建托盘图标
mainForm.tray.tip = "右键打开菜单" //设置鼠标提示

//主窗口是否显示
if(cfg.apps_setting.启动到托盘){
	mainForm.tray.pop("应用已启动，右击托盘获取更多菜单","ChiikawaBest",,3000);
}
else {
	mainForm.show();
}

return win.loopMessage();