import win.ui;
/*DSG{{*/
mainForm = win.form(text="atoms";right=255;bottom=63;border="thin")
mainForm.add()
/*}}*/

//////////////////////////////////////////////////////////////////////
//Libray导入
//////////////////////////////////////////////////////////////////////

//托盘库
import win.ui.menu;
import win.util.tray;

//配置设置
import fsys.config;
cfgPath = io.appData("/appvar/app.config");
cfg = fsys.config(cfgPath);

//为了访问本地文件而采用异步http服务器
//异步可能会阻塞进程，所以采用了多线程http服务器
import wsock.tcp.simpleHttpServer;
namespace wsock.tcp.simpleHttpServer{
	//startIp = "0.0.0.0"; //不限制本机 IP
    //startPort = 8615; //不指定端口时会自动分配空闲端口
    threadGlobal = { mainForm = ..mainForm }; //指定 HTTP 服务线程的默认全局变量,注意定义线程函数的作用域同名变量不能是局部变量
}

//////////////////////////////////////////////////////////////////////
//全局变量
//////////////////////////////////////////////////////////////////////

if(cfg.proxy_setting){
	if(cfg.proxy_setting.使用http代理){
		launch_params = "--proxy-server=http://" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本 + "  --accept-lang=zh-CN";
		inet_launch_params = "HTTP=HTTP://" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本;
	}
	elseif(cfg.proxy_setting.使用socks5代理){
		launch_params = "--proxy-server=SOCKS5://" + cfg.proxy_setting.地址文本s + ":" + cfg.proxy_setting.端口文本s + "  --accept-lang=zh-CN";
		inet_launch_params = "SOCKS=" + cfg.proxy_setting.地址文本 + ":" + cfg.proxy_setting.端口文本;
	}
	else {
		launch_params = "--accept-lang=zh-CN";
		inet_launch_params = " ";
	}
}
else {
	launch_params = "--accept-lang=zh-CN";
	inet_launch_params = " ";
}

wbUserDataDir = io.appData("/appvar/userDataDir");
wbHistoryDir = wbUserDataDir+"\EBWebView\Default\"; 

//////////////////////////////////////////////////////////////////////
//托盘消息拦截
//////////////////////////////////////////////////////////////////////

//托盘菜单设置
mainForm.wndproc = function(hwnd,message,wparam,lparam){
    select(message) {//判断消息类型
        case  0x10/*_WM_CLOSE*/{
            cleanHistory();
            fadeHide();
        };
        case( 0x400+9981/*_WM_TRAYMESSAGE*/ ) { //托盘图标消息
            if( lparam = 0x205/*_WM_RBUTTONUP*/ ){
                    import mouse;
                    x,y = mouse.getPos();
                    //弹出托盘菜单以前，一定要前置主窗口中，不然不点击菜单不会消失
                    win.setForeground(mainForm.hwnd)
                    mainForm.popmenu.popup( x,y,true )
            }
             if(lparam = 0x203/*_WM_LBUTTONDBLCLK)*/){  //鼠标双击
                mainForm.show(true);
                mainForm.popmenu.setString(1,"隐藏");
            }
        };
        case( 0x112/*_WM_SYSCOMMAND*/ ){ //系统命令消息
            if( wparam == 0xF020/*_SC_MINIMIZE*/ ){ //用户点击了最小化按钮
                mainForm.show(false); //隐藏窗口
                mainForm.popmenu.setString(1,"显示")
                return true;//阻击默认消息传递，取消最小化过程
              }
        };
        
     }
        
        //无返回值则继续调用默认回调函数
}//endproc

//////////////////////////////////////////////////////////////////////
//自定义函数
//////////////////////////////////////////////////////////////////////

fadeHide = function(){
    for(i=17;1;-1){
        mainForm.transparent( i * 15);
        x,y,cx,cy = mainForm.getPos();
        mainForm.setPos(x-1,y-1,cx+2,cy+2);
        win.delay(5);
    };  
    win.quitMessage();
}

cleanHistory = function(){
	if(cfg.apps_setting){
    	if(cfg.apps_setting.关闭时清空记录){
    	    if(io.exist(wbHistoryDir + "Visited Links")){
    	    	mainForm.msgbox("3秒后即将清理历史记录","注意",0,3000)
    			if(io.remove(wbHistoryDir + "Visited Links") and io.remove(wbHistoryDir + "History") and io.remove(wbHistoryDir + "History-journal")){
    				mainForm.msgbox("清理成功！即将自动退出！", "恭喜！",0,1200)
    			}
    			else {
    				mainForm.msgbox("清理失败！请手动清理！即将自动退出！", "注意！",0,2000)
    			}
    	    }
			else {
				mainForm.msgbox("没有历史记录！即将自动退出！","恭喜！",0,1000)
			}
			
    	}
	}
}

//////////////////////////////////////////////////////////////////////
//弹出菜单设置
//////////////////////////////////////////////////////////////////////

mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单

mainForm.popmenu.add("隐藏",function(id){
    //在下面输入菜单响应代码
    stat = win.isVisible(mainForm.hwnd);
    if(stat){
        mainForm.show(false);
        mainForm.popmenu.setString(1,"显示")   
    }else {
        mainForm.show(true);
        mainForm.popmenu.setString(1,"隐藏")
    }
});

mainForm.popmenu.add();//分隔线
mainForm.popmenu.add("网页监控",function(){
	var webwatcher1 = mainForm.loadForm("\dlg\webwatcher.aardio");
	webwatcher1.show();
})
mainForm.popmenu.add("时间线",function(){
	var timeline1 = mainForm.loadForm("\dlg\timeline.aardio");
	timeline1.show();
})

mainForm.popmenu.add();//分隔线
mainForm.popmenu.add('退出',function(id){ 
	mainForm.close();
})

//////////////////////////////////////////////////////////////////////
//创建托盘图标
//////////////////////////////////////////////////////////////////////

tray = win.util.tray(mainForm) //创建托盘图标
tray.message = 0x400+9981/*_WM_TRAYMESSAGE*/
tray.tip = "右键打开菜单" //设置鼠标提示

mainForm.show();
mainForm.hitMin();
tray.pop("应用已启动，隐藏到托盘","Atoms",,3000);
return win.loopMessage();